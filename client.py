import logging
import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup
import re
import calendar
from datetime import datetime, date, timedelta
from utils.keyboards import get_client_menu_keyboard, get_start_keyboard, get_confirmation_keyboard

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–ª–∏–µ–Ω—Ç–∞
class ClientStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    selecting_service = State()
    selecting_date = State()
    selecting_time = State()
    confirm_appointment = State()
    rating_service = State()
    writing_review = State()
    rescheduling_select_date = State()
    rescheduling_select_time = State()
    waiting_for_support_question = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ

def register_handlers(bot, sheets_service, logging_service, scheduler_service=None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º:
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
    - –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º
    - –ü—Ä–æ—Å–º–æ—Ç—Ä/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏
    """
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞")

    @bot.message_handler(func=lambda message: message.text == "üë§ –Ø –∫–ª–∏–µ–Ω—Ç")
    def client_start(message):
        """
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –Ω–∞–∂–∞–ª "üë§ –Ø –∫–ª–∏–µ–Ω—Ç",
        —Ç–æ –µ–º—É –≥–æ–≤–æ—Ä—è—Ç: –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
        """
        try:
            bot.send_message(
                message.chat.id,
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –í–∞—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º –ø—Ä—è–º—É—é (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é) —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                    types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                )
            )
            # –õ–æ–≥
            user_id = message.from_user.id
            username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}"
            logging_service.log_message(user_id, username, "–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–Ø –∫–ª–∏–µ–Ω—Ç'", 'user')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–Ø –∫–ª–∏–µ–Ω—Ç': {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(func=lambda message: message.text and message.text.startswith('/start ref'))
    def register_client_by_ref(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–±—Ä–∞–ª –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞:
        /start refXXX
        (–ù–∞–ø—Ä–∏–º–µ—Ä, /start ref2)
        –ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
        """
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º (client.py): {message.text}")
            user_id = message.from_user.id
            username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}"

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
            try:
                bot.delete_state(user_id, message.chat.id)
            except Exception as e_del:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è /start ref: {e_del}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º ref_code
            text_parts = message.text.strip().split()
            if len(text_parts) < 2:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            ref_part = text_parts[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "ref2"
            if not ref_part.startswith("ref"):
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            specialist_id = ref_part[3:]  # —É–±–∏—Ä–∞–µ–º "ref"
            if not specialist_id.isdigit():
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (ID –Ω–µ —á–∏—Å–ª–æ).")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
            specialist = sheets_service.get_specialist_by_id(specialist_id)
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ—Ä–Ω–∞."
                )
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
            logging_service.log_message(
                user_id,
                username,
                f"–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ ID={specialist_id}",
                'user'
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∂–¥–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"
            bot.set_state(user_id, ClientStates.waiting_for_name, message.chat.id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with bot.retrieve_data(user_id, message.chat.id) as data:
                data['specialist_id'] = specialist_id
                data['specialist_name'] = specialist.get('–ò–º—è', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
            bot.send_message(
                message.chat.id,
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist.get('–ò–º—è', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')}.\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=ClientStates.waiting_for_name)
    def process_client_name(message):
        """
        –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≤–≤–µ–¥–µ—Ç —Å–≤–æ–µ –∏–º—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ" –∏ —Ç.–ø.
            if message.text in ["üë§ –Ø –∫–ª–∏–µ–Ω—Ç", "üë®‚Äç‚öïÔ∏è –Ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"]:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏: {message.text}")
                if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
                    bot.delete_state(message.from_user.id, message.chat.id)
                    from utils.keyboards import get_start_keyboard
                    bot.send_message(
                        message.chat.id,
                        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                        reply_markup=get_start_keyboard()
                    )
                return

            name = message.text.strip()
            if len(name) < 2:
                bot.send_message(message.chat.id, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
                return

            user_id = message.from_user.id

            with bot.retrieve_data(user_id, message.chat.id) as data:
                data['name'] = name
                if 'specialist_id' not in data:
                    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å
                    logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç specialist_id –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                    bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ.")
                    bot.delete_state(user_id, message.chat.id)
                    return

            username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}"
            logger.info(f"process_client_name: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∏–º—è {name}")
            # –õ–æ–≥–∏—Ä—É–µ–º
            logging_service.log_message(user_id, username, f"–í–≤–µ–ª –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name}", "user")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            bot.set_state(user_id, ClientStates.waiting_for_phone, message.chat.id)
            bot.send_message(
                message.chat.id,
                f"–°–ø–∞—Å–∏–±–æ, {name}! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_client_name: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(state=ClientStates.waiting_for_phone)
    def process_client_phone(message):
        """
        –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≤–≤–µ–¥–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω.
        –ï—Å–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' => —Ç–µ–ª–µ—Ñ–æ–Ω –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º.
        –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
        """
        try:
            text = message.text.strip()
            user_id = message.from_user.id
            username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}"

            if text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                phone = ''
            else:
                phone = re.sub(r'\D', '', text)
                if len(phone) < 10:
                    bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
                    return

            with bot.retrieve_data(user_id, message.chat.id) as data:
                name = data.get('name')
                specialist_id = data.get('specialist_id')

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ Google Sheets, –ø–µ—Ä–µ–¥–∞–≤–∞—è Telegram ID
            client_id = sheets_service.add_client(name, phone, specialist_id, user_id)
            if not client_id:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                bot.delete_state(user_id, message.chat.id)
                return

            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
            bot.delete_state(user_id, message.chat.id)
            bot.send_message(
                message.chat.id,
                "–û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º!",
                reply_markup=get_client_menu_keyboard()
            )
            # –õ–æ–≥–∏—Ä—É–µ–º
            logging_service.log_message(user_id, username, f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (ID={client_id})", "system")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_client_phone: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(func=lambda message: message.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")
    def book_appointment(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º" –≤ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞.
        –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ:
        - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∏–µ–Ω—Ç
        - –ø–æ–∫–∞–∑–∞—Ç—å –µ–º—É —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        - –¥–∞–ª–µ–µ –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç
            client = sheets_service.get_client_by_telegram_id(message.from_user.id)
            if not client:
                # –ù–µ –∫–ª–∏–µ–Ω—Ç -> –ø—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫—É
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
            specialist_id = client['id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞']
            services = sheets_service.get_specialist_services(specialist_id)
            if not services:
                bot.send_message(
                    message.chat.id,
                    "–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é.",
                    reply_markup=get_client_menu_keyboard()
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—Å–ª—É–≥–∞–º–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            for svc in services:
                title = svc.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                dur = svc.get('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 30)
                cost = svc.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 0)
                button_text = f"{title} ({dur} –º–∏–Ω, {cost} —Ä—É–±)"
                markup.add(types.KeyboardButton(button_text))
            markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ selecting_service
            bot.set_state(message.from_user.id, ClientStates.selecting_service, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['client_id'] = client['id']
                data['specialist_id'] = specialist_id
                data['services'] = services

            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º': {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=ClientStates.selecting_service)
    def process_service_choice(message):
        try:
            if message.text == "üîô –û—Ç–º–µ–Ω–∞":
                # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_client_menu_keyboard())
                return

            service_text = message.text.strip()
            # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                services = data.get('services', [])

            chosen_service = None
            for svc in services:
                title = svc.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                dur = svc.get('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 30)
                cost = svc.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 0)
                if service_text == f"{title} ({dur} –º–∏–Ω, {cost} —Ä—É–±)":
                    chosen_service = svc
                    break

            if not chosen_service:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['selected_service'] = chosen_service
                data['service_name'] = chosen_service.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')
                data['service_duration'] = int(chosen_service.get('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 30))
                data['service_cost'] = int(chosen_service.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 0))
                specialist_id = data.get('specialist_id')

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
            bot.set_state(message.from_user.id, ClientStates.selecting_date, message.chat.id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = date.today()
            year, month = today.year, today.month
            create_date_calendar(bot, message.chat.id, year, month, int(chosen_service.get('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 30)), specialist_id, sheets_service, scheduler_service)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_service_choice: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)

    def create_date_calendar(bot_instance, chat_id, year, month, service_duration=30, specialist_id=None, sheets_service=None, scheduler_service=None):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–Ω–µ–π.
        –ó–µ–ª–µ–Ω—ã–µ –¥–Ω–∏ - –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏.
        –ö—Ä–∞—Å–Ω—ã–µ –¥–Ω–∏ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.

        Args:
            service_duration: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            specialist_id: ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        """
        try:
            keyboard = types.InlineKeyboardMarkup(row_width=7)

            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü—É
            prev_month = month - 1 if month > 1 else 12
            prev_year = year if month > 1 else year - 1
            next_month = month + 1 if month < 12 else 1
            next_year = year if month < 12 else year + 1

            prev_btn = types.InlineKeyboardButton("<<", callback_data=f"prev_{year}_{month}_{service_duration}")
            next_btn = types.InlineKeyboardButton(">>", callback_data=f"next_{year}_{month}_{service_duration}")

            month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", 
                           "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
            month_label = f"{month_names[month-1]} {year}"
            month_btn = types.InlineKeyboardButton(month_label, callback_data="ignore")

            keyboard.row(prev_btn, month_btn, next_btn)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
            header_buttons = [types.InlineKeyboardButton(day, callback_data="ignore") for day in days]
            keyboard.row(*header_buttons)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            available_days = {}

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–Ω–µ–π
            if specialist_id and sheets_service:
                # –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
                start_date = datetime(year, month, 1).date()
                if month == 12:
                    end_date = datetime(year + 1, 1, 1).date() - timedelta(days=1)
                else:
                    end_date = datetime(year, month + 1, 1).date() - timedelta(days=1)

                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≤ –º–µ—Å—è—Ü–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                current_date = start_date
                while current_date <= end_date:
                    date_str = current_date.strftime('%Y-%m-%d')

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                    available_slots = sheets_service.get_available_slots(specialist_id, date_str)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                    has_enough_slots = check_consecutive_slots(available_slots, service_duration)
                    available_days[date_str] = has_enough_slots

                    current_date += timedelta(days=1)

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            cal = calendar.monthcalendar(year, month)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            today_date = date.today()
            for week in cal:
                row = []
                for day_num in week:
                    if day_num == 0:
                        # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                        row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∞—è –ª–∏ —ç—Ç–æ –¥–∞—Ç–∞
                        current_date = date(year, month, day_num)
                        date_str = current_date.strftime('%Y-%m-%d')

                        if current_date < today_date:
                            # –ü—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è
                            row.append(types.InlineKeyboardButton(str(day_num), callback_data="ignore"))
                        else:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤
                            is_available = available_days.get(date_str, False)

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
                            btn_text = f"üü¢{day_num}" if is_available else f"üî¥{day_num}"

                            # –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π —Ñ–æ—Ä–º–∏—Ä—É–µ–º callback_data
                            if is_available:
                                callback_data = f"bookdate_{year}_{month}_{day_num}"
                                row.append(types.InlineKeyboardButton(btn_text, callback_data=callback_data))
                            else:
                                # –î–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π —É–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback
                                row.append(types.InlineKeyboardButton(btn_text, callback_data="no_slots"))
                keyboard.row(*row)

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            keyboard.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))

            bot_instance.send_message(
                chat_id, 
                "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É: üü¢ - –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è, üî¥ - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", 
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_date_calendar: {e}", exc_info=True)
            bot_instance.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def normalize_date(date_str):
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏.
        """
        if not date_str:
            return ""
        return date_str.strip()

                def check_consecutive_slots(slots, service_duration):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        –¥–ª—è —É—Å–ª—É–≥–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

        Args:
            slots: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            service_duration: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

        Returns:
            bool: True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤, –∏–Ω–∞—á–µ False
        """
        import logging
        logger = logging.getLogger(__name__)

        if not slots:
            logger.debug(f"check_consecutive_slots: –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤")
            return False

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        slots_by_time = []
        for slot in slots:
            try:
                time_str = slot.get('–í—Ä–µ–º—è', '').strip()
                if not time_str:
                    continue

                h, m = map(int, time_str.split(':'))
                time_val = h*60 + m
                slots_by_time.append((time_val, slot.get('id')))
            except (ValueError, KeyError, AttributeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞: {e}")
                continue

        # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (30 –º–∏–Ω –∫–∞–∂–¥—ã–π)
        slot_count = max(1, (service_duration + 29) // 30)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

        logger.debug(f"check_consecutive_slots: —Ç—Ä–µ–±—É–µ—Ç—Å—è {slot_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è {service_duration} –º–∏–Ω—É—Ç")

        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–æ—Ç–æ–≤ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ
        if len(slots_by_time) < slot_count:
            logger.debug(f"check_consecutive_slots: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤ ({len(slots_by_time)} < {slot_count})")
            return False

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        slots_by_time.sort()

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if len(slots_by_time) > 0:
            debug_times = ", ".join([f"{t//60}:{t%60:02d}" for t, _ in slots_by_time[:5]])
            logger.debug(f"check_consecutive_slots: –ø–µ—Ä–≤—ã–µ —Å–ª–æ—Ç—ã: {debug_times}")

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for i in range(len(slots_by_time) - slot_count + 1):
            contiguous = True

            for j in range(1, slot_count):
                prev_time = slots_by_time[i+j-1][0]
                curr_time = slots_by_time[i+j][0]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç—ã –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (—Å —à–∞–≥–æ–º 30 –º–∏–Ω)
                if curr_time - prev_time != 30:
                    contiguous = False
                    logger.debug(f"check_consecutive_slots: —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É {prev_time//60}:{prev_time%60:02d} –∏ {curr_time//60}:{curr_time%60:02d}")
                    break

            if contiguous:
                start_time = slots_by_time[i][0]
                end_time = slots_by_time[i+slot_count-1][0] + 30
                logger.debug(f"check_consecutive_slots: –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã —Å {start_time//60}:{start_time%60:02d} –¥–æ {end_time//60}:{end_time%60:02d}")
                return True

        logger.debug(f"check_consecutive_slots: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {slot_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        return False

        Args:
            slots: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            service_duration: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

        Returns:
            bool: True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤, –∏–Ω–∞—á–µ False
        """
        import logging
        logger = logging.getLogger(__name__)

        if not slots:
            logger.debug(f"check_consecutive_slots: –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤")
            return False

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        slots_by_time = []
        for slot in slots:
            try:
                time_str = slot.get('–í—Ä–µ–º—è', '').strip()
                if not time_str:
                    continue

                h, m = map(int, time_str.split(':'))
                time_val = h*60 + m
                slots_by_time.append((time_val, slot.get('id')))
            except (ValueError, KeyError, AttributeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞: {e}")
                continue

        # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (30 –º–∏–Ω –∫–∞–∂–¥—ã–π)
        slot_count = max(1, (service_duration + 29) // 30)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

        logger.debug(f"check_consecutive_slots: —Ç—Ä–µ–±—É–µ—Ç—Å—è {slot_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è {service_duration} –º–∏–Ω—É—Ç")

        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–æ—Ç–æ–≤ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ
        if len(slots_by_time) < slot_count:
            logger.debug(f"check_consecutive_slots: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤ ({len(slots_by_time)} < {slot_count})")
            return False

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        slots_by_time.sort()

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if len(slots_by_time) > 0:
            debug_times = ", ".join([f"{t//60}:{t%60:02d}" for t, _ in slots_by_time[:5]])
            logger.debug(f"check_consecutive_slots: –ø–µ—Ä–≤—ã–µ —Å–ª–æ—Ç—ã: {debug_times}")

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for i in range(len(slots_by_time) - slot_count + 1):
            contiguous = True

            for j in range(1, slot_count):
                prev_time = slots_by_time[i+j-1][0]
                curr_time = slots_by_time[i+j][0]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç—ã –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (—Å —à–∞–≥–æ–º 30 –º–∏–Ω)
                if curr_time - prev_time != 30:
                    contiguous = False
                    logger.debug(f"check_consecutive_slots: —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É {prev_time//60}:{prev_time%60:02d} –∏ {curr_time//60}:{curr_time%60:02d}")
                    break

            if contiguous:
                start_time = slots_by_time[i][0]
                end_time = slots_by_time[i+slot_count-1][0] + 30
                logger.debug(f"check_consecutive_slots: –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã —Å {start_time//60}:{start_time%60:02d} –¥–æ {end_time//60}:{end_time%60:02d}")
                return True

        logger.debug(f"check_consecutive_slots: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {slot_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        return False


        Args:
            slots: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            service_duration: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

        Returns:
            bool: True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤, –∏–Ω–∞—á–µ False
        """
        import logging
        logger = logging.getLogger(__name__)

        if not slots:
            logger.debug(f"check_consecutive_slots: –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤")
            return False

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        slots_by_time = []
        for slot in slots:
            try:
                time_str = slot.get('–í—Ä–µ–º—è', '').strip()
                if not time_str:
                    continue

                h, m = map(int, time_str.split(':'))
                time_val = h*60 + m
                slots_by_time.append((time_val, slot.get('id')))
            except (ValueError, KeyError, AttributeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞: {e}")
                continue

        # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (30 –º–∏–Ω –∫–∞–∂–¥—ã–π)
        slot_count = max(1, (service_duration + 29) // 30)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

        logger.debug(f"check_consecutive_slots: —Ç—Ä–µ–±—É–µ—Ç—Å—è {slot_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è {service_duration} –º–∏–Ω—É—Ç")

        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–æ—Ç–æ–≤ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ
        if len(slots_by_time) < slot_count:
            logger.debug(f"check_consecutive_slots: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤ ({len(slots_by_time)} < {slot_count})")
            return False

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        slots_by_time.sort()

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if len(slots_by_time) > 0:
            debug_times = ", ".join([f"{t//60}:{t%60:02d}" for t, _ in slots_by_time[:5]])
            logger.debug(f"check_consecutive_slots: –ø–µ—Ä–≤—ã–µ —Å–ª–æ—Ç—ã: {debug_times}")

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for i in range(len(slots_by_time) - slot_count + 1):
            contiguous = True

            for j in range(1, slot_count):
                prev_time = slots_by_time[i+j-1][0]
                curr_time = slots_by_time[i+j][0]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç—ã –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (—Å —à–∞–≥–æ–º 30 –º–∏–Ω)
                if curr_time - prev_time != 30:
                    contiguous = False
                    logger.debug(f"check_consecutive_slots: —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É {prev_time//60}:{prev_time%60:02d} –∏ {curr_time//60}:{curr_time%60:02d}")
                    break

            if contiguous:
                start_time = slots_by_time[i][0]
                end_time = slots_by_time[i+slot_count-1][0] + 30
                logger.debug(f"check_consecutive_slots: –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã —Å {start_time//60}:{start_time%60:02d} –¥–æ {end_time//60}:{end_time%60:02d}")
                return True

        logger.debug(f"check_consecutive_slots: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {slot_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        return False

    @bot.callback_query_handler(func=lambda call: call.data == "no_slots")
    def no_available_slots(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã"""
        bot.answer_callback_query(call.id, "–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("prev_") or call.data.startswith("next_"), 
                              state=[ClientStates.selecting_date, ClientStates.rescheduling_select_date])
    def calendar_nav(call):
        try:
            parts = call.data.split('_')
            direction = parts[0]
            year = int(parts[1])
            month = int(parts[2])
            service_duration = 30

            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if len(parts) > 3 and parts[3].isdigit():
                service_duration = int(parts[3])

            if direction == 'prev':
                new_month = month - 1 if month > 1 else 12
                new_year = year if month > 1 else year - 1
            else:
                new_month = month + 1 if month < 12 else 1
                new_year = year if month < 12 else year + 1

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            user_id = call.from_user.id
            chat_id = call.message.chat.id
            state = bot.get_state(user_id, chat_id)

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            specialist_id = None
            with bot.retrieve_data(user_id, chat_id) as data:
                specialist_id = data.get('specialist_id')

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e_del:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e_del}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            if state == "ClientStates.selecting_date":
                create_date_calendar(bot, chat_id, new_year, new_month, service_duration, specialist_id, sheets_service, scheduler_service)
            else:
                # –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
                create_date_calendar(bot, chat_id, new_year, new_month, service_duration, specialist_id, sheets_service, scheduler_service)

            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ª–∏—Å—Ç–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", exc_info=True)
            bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("bookdate_"), state=ClientStates.selecting_date)
    def select_date(call):
        try:
            _, year, month, day = call.data.split('_')
            year, month, day = int(year), int(month), int(day)
            date_str = f"{year}-{month:02d}-{day:02d}"
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with bot.retrieve_data(user_id, chat_id) as data:
                specialist_id = data.get('specialist_id')
                service_duration = data.get('service_duration', 30)

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            date_str = normalize_date(date_str)

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            available_slots = sheets_service.get_available_slots(specialist_id, date_str)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏
            has_slots = check_consecutive_slots(available_slots, service_duration)
            if not has_slots:
                bot.answer_callback_query(call.id, text="–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SchedulerService –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if scheduler_service:
                times = scheduler_service.get_available_times(specialist_id, date_str, service_duration)
                if not times:
                    bot.answer_callback_query(call.id, text="–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏")
                    return

                # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
                try:
                    bot.delete_message(chat_id, call.message.message_id)
                except Exception as e_del:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e_del}")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
                bot.set_state(user_id, ClientStates.selecting_time, chat_id)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                with bot.retrieve_data(user_id, chat_id) as data:
                    data['selected_date'] = date_str

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    try:
                        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                        data['formatted_date'] = date_obj.strftime('%d.%m.%Y')
                    except:
                        data['formatted_date'] = date_str

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
                keyboard = types.InlineKeyboardMarkup()
                for time_str in times:
                    keyboard.add(types.InlineKeyboardButton(time_str, callback_data=f"booktime_{time_str}"))
                keyboard.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))

                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
                bot.answer_callback_query(call.id)
                return

            # –ï—Å–ª–∏ SchedulerService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            # –ü–æ–¥–±–∏—Ä–∞–µ–º —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
            slot_count = max(1, (service_duration + 29) // 30)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

            # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ (–≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
            slots_by_time = []
            for slot in available_slots:
                try:
                    h, m = map(int, slot['–í—Ä–µ–º—è'].split(':'))
                    time_val = h*60 + m
                    slots_by_time.append((time_val, slot['id']))
                except (ValueError, KeyError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞: {e}")
                    continue

            slots_by_time.sort()

            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            options = []
            for i in range(len(slots_by_time) - slot_count + 1):
                seq = [slots_by_time[i]]
                contiguous = True
                for j in range(1, slot_count):
                    if i+j >= len(slots_by_time):
                        contiguous = False
                        break
                    prev_time = slots_by_time[i+j-1][0]
                    curr_time = slots_by_time[i+j][0]
                    diff = curr_time - prev_time
                    if diff != 30:
                        contiguous = False
                        break

                if contiguous:
                    seq_ids = [slots_by_time[i+k][1] for k in range(slot_count)]
                    start_minutes = slots_by_time[i][0]
                    end_minutes = start_minutes + service_duration
                    start_h = start_minutes // 60
                    start_m = start_minutes % 60
                    end_h = end_minutes // 60
                    end_m = end_minutes % 60
                    start_time_str = f"{start_h:02d}:{start_m:02d}"
                    end_time_str = f"{end_h:02d}:{end_m:02d}"
                    label = f"{start_time_str}" if slot_count == 1 else f"{start_time_str}-{end_time_str}"
                    options.append((label, seq_ids))

            if not options:
                bot.answer_callback_query(call.id, text="–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏")
                return

            # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e_del:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e_del}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
            bot.set_state(user_id, ClientStates.selecting_time, chat_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ—Ç–æ–≤ –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            with bot.retrieve_data(user_id, chat_id) as data:
                data['booking_options'] = {str(ids[0]): ids for _, ids in options}
                data['selected_date'] = date_str

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    data['formatted_date'] = date_obj.strftime('%d.%m.%Y')
                except:
                    data['formatted_date'] = date_str

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
            keyboard = types.InlineKeyboardMarkup()
            for label, seq_ids in options:
                first_id = seq_ids[0]
                keyboard.add(types.InlineKeyboardButton(label, callback_data=f"booktime_{first_id}"))
            keyboard.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))

            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
            bot.answer_callback_query(call.id)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã: {e}", exc_info=True)
            bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã")
    @bot.callback_query_handler(func=lambda call: call.data.startswith("booktime_"), state=ClientStates.selecting_time)
    def select_time(call):
        try:
            time_data = call.data.split('_')[1]
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            with bot.retrieve_data(user_id, chat_id) as data:
                specialist_id = data.get('specialist_id')
                service_name = data.get('service_name', '')
                service_cost = data.get('service_cost', 0)
                service_duration = data.get('service_duration', 30)
                selected_date = data.get('selected_date', '')

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ä–∞–Ω—å—à–µ
                if 'formatted_date' not in data:
                    try:
                        date_obj = datetime.strptime(selected_date, '%Y-%m-%d')
                        data['formatted_date'] = date_obj.strftime('%d.%m.%Y')
                    except:
                        data['formatted_date'] = selected_date

                formatted_date = data.get('formatted_date', selected_date)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if scheduler_service and ':' in time_data:  # –°—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–¥–∞ "09:00"
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º SchedulerService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IDs —Å–ª–æ—Ç–æ–≤
                slot_ids = scheduler_service.get_slot_ids_for_booking(
                    specialist_id, selected_date, time_data, service_duration
                )
                start_time = time_data
            else:  # ID –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                booking_options = data.get('booking_options', {})
                slot_ids = booking_options.get(time_data, [time_data])

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                all_slots = sheets_service.schedule_sheet.get_all_records()
                start_time = None
                for slot in all_slots:
                    if str(slot.get('id')) == str(slot_ids[0]):
                        start_time = slot.get('–í—Ä–µ–º—è')
                        break
                start_time = start_time or ''

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_text = (
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ {service_name} ("
                f"{service_duration} –º–∏–Ω) –Ω–∞ {formatted_date} –≤ {start_time}. "
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {service_cost} —Ä—É–±. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:"
            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            bot.set_state(user_id, ClientStates.confirm_appointment, chat_id)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = get_confirmation_keyboard()

            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            bot.edit_message_text(confirm_text, chat_id, call.message.message_id, reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with bot.retrieve_data(user_id, chat_id) as data:
                data['slots_to_book'] = slot_ids
                data['start_time'] = start_time
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}", exc_info=True)
            bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏")

    @bot.callback_query_handler(func=lambda call: call.data == "confirm", state=ClientStates.confirm_appointment)
    def confirm_appointment(call):
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            with bot.retrieve_data(user_id, chat_id) as data:
                slot_ids = data.get('slots_to_book', [])
                service_name = data.get('service_name', '')
                service_cost = data.get('service_cost', 0)
                service_duration = data.get('service_duration', 30)
                selected_date = data.get('selected_date', '')
                start_time = data.get('start_time', '')
                formatted_date = data.get('formatted_date', selected_date)

            client = sheets_service.get_client_by_telegram_id(user_id)
            client_id = client['id'] if client else None
            specialist_id = client['id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'] if client else None

            if not slot_ids or not client_id:
                bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return

            # –ë—Ä–æ–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã
            success = True
            booked = []
            for sid in slot_ids:
                res = sheets_service.book_appointment(sid, client_id)
                if res:
                    booked.append(sid)
                else:
                    success = False
                    break

            if not success:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                for sid in booked:
                    sheets_service.cancel_appointment(sid)
                bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", chat_id, call.message.message_id)
                bot.delete_state(user_id, chat_id)
            else:
                # –£—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                success_message = (
                    f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {service_name} –Ω–∞ {formatted_date} –≤ {start_time}. "
                    f"–ó–∞ 24 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞ —è –ø—Ä–∏—à–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."
                )
                bot.edit_message_text(success_message, chat_id, call.message.message_id)
                bot.send_message(
                    chat_id,
                    "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'.",
                    reply_markup=get_client_menu_keyboard()
                )
                bot.delete_state(user_id, chat_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                if specialist_id:
                    specialist = sheets_service.get_specialist_by_id(specialist_id)
                    if specialist and specialist.get('Telegram_ID'):
                        try:
                            specialist_telegram_id = specialist.get('Telegram_ID')
                            notification_text = (
                                f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
                                f"–ö–ª–∏–µ–Ω—Ç: {client.get('–ò–º—è', '–ö–ª–∏–µ–Ω—Ç')}\n"
                                f"–£—Å–ª—É–≥–∞: {service_name}\n"
                                f"–î–∞—Ç–∞: {formatted_date}\n"
                                f"–í—Ä–µ–º—è: {start_time}\n"
                                f"–¢–µ–ª–µ—Ñ–æ–Ω: {client.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                            )
                            bot.send_message(specialist_telegram_id, notification_text)
                        except Exception as notify_err:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {notify_err}")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
                appt_id = slot_ids[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                # –ï—Å–ª–∏ –µ—Å—Ç—å scheduler_service, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if scheduler_service:
                    try:
                        reminder_id = scheduler_service.add_reminder(
                            appt_id, client_id, selected_date, start_time, "pending", 
                            specialist_id, service_name
                        )
                        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID={reminder_id} –¥–ª—è –∑–∞–ø–∏—Å–∏ ID={appt_id}")
                    except:
                        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ sheets_service –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                        sheets_service.add_reminder(appt_id, client_id, selected_date, start_time, "pending")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ sheets_service
                    try:
                        sheets_service.add_reminder(appt_id, client_id, selected_date, start_time, "pending")
                    except Exception as reminder_err:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_err}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
            bot.delete_state(call.from_user.id, call.message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_booking", state=ClientStates.confirm_appointment)
    def cancel_booking(call):
        """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            bot.edit_message_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —É—Å–ª—É–≥—É.",
                           reply_markup=get_client_menu_keyboard())
            bot.delete_state(call.from_user.id, call.message.chat.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ cancel_booking: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            bot.delete_state(call.from_user.id, call.message.chat.id)

    @bot.message_handler(func=lambda message: message.text == "üîç –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
    def view_appointments(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏" –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å.
        """
        try:
            client = sheets_service.get_client_by_telegram_id(message.from_user.id)
            if not client:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            appointments = sheets_service.get_client_appointments(client['id'])
            if not appointments:
                bot.send_message(
                    message.chat.id,
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
                    reply_markup=get_client_menu_keyboard()
                )
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
            appointments.sort(key=lambda a: (a['–î–∞—Ç–∞'], a['–í—Ä–µ–º—è']))

            text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n"
            for i, appt in enumerate(appointments, start=1):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    date_obj = datetime.strptime(appt['–î–∞—Ç–∞'], '%Y-%m-%d')
                    formatted_date = date_obj.strftime('%d.%m.%Y')
                except:
                    formatted_date = appt['–î–∞—Ç–∞']

                text += f"{i}. {formatted_date} –≤ {appt['–í—Ä–µ–º—è']}\n"

            keyboard = types.InlineKeyboardMarkup()
            for i, appt in enumerate(appointments, start=1):
                slot_id = appt['id']
                keyboard.row(
                    types.InlineKeyboardButton(f"‚úèÔ∏è {i}", callback_data=f"reschedappt_{slot_id}"),
                    types.InlineKeyboardButton(f"‚ùå {i}", callback_data=f"cancelappt_{slot_id}")
                )
            keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel"))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['appointments'] = appointments
                data['appointments_text'] = text

            bot.send_message(message.chat.id, text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ú–æ–∏ –∑–∞–ø–∏—Å–∏': {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancelappt_"))
    def cancel_appointment_request(call):
        try:
            slot_id = call.data.split('_')[1]
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏
            with bot.retrieve_data(user_id, chat_id) as data:
                appointments = data.get('appointments', [])

            appt = None
            for a in appointments:
                if str(a.get('id')) == str(slot_id):
                    appt = a
                    break

            if not appt:
                bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                date_obj = datetime.strptime(appt['–î–∞—Ç–∞'], '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d.%m.%Y')
            except:
                formatted_date = appt['–î–∞—Ç–∞']

            date_str = formatted_date
            time_str = appt['–í—Ä–µ–º—è']

            # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                bot.edit_message_reply_markup(chat_id, call.message.message_id)
            except Exception as e_edit:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e_edit}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirmcancel_{slot_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancelcancel")
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
            bot.send_message(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {date_str} –≤ {time_str}?", reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
            with bot.retrieve_data(user_id, chat_id) as data:
                data['appointments_message_id'] = call.message.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ cancel_appointment_request: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirmcancel_"))
    def confirm_cancel_appointment(call):
        try:
            slot_id = call.data.split('_')[1]
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            client = sheets_service.get_client_by_telegram_id(user_id)
            if not client:
                bot.answer_callback_query(call.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π
            all_slots = sheets_service.schedule_sheet.get_all_records()
            appointment_info = None
            specialist_id = None

            for slot in all_slots:
                if str(slot.get('id')) == str(slot_id):
                    appointment_info = slot
                    specialist_id = slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
                    break

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            success = sheets_service.cancel_appointment(slot_id)
            if not success:
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
            if appointment_info and specialist_id:
                specialist = sheets_service.get_specialist_by_id(specialist_id)
                if specialist and specialist.get('Telegram_ID'):
                    try:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        date_str = appointment_info['–î–∞—Ç–∞']
                        try:
                            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                            formatted_date = date_obj.strftime('%d.%m.%Y')
                        except:
                            formatted_date = date_str

                        time_str = appointment_info['–í—Ä–µ–º—è']
                        specialist_telegram_id = specialist.get('Telegram_ID')

                        notification_text = (
                            f"–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏!\n"
                            f"–ö–ª–∏–µ–Ω—Ç {client.get('–ò–º—è', '–ö–ª–∏–µ–Ω—Ç')} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ {formatted_date} –≤ {time_str}.\n"
                            f"–°–ª–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏."
                        )
                        bot.send_message(specialist_telegram_id, notification_text)
                    except Exception as notify_err:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {notify_err}")

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            appointments = sheets_service.get_client_appointments(client['id'])

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
            if appointments:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
                appointments.sort(key=lambda a: (a['–î–∞—Ç–∞'], a['–í—Ä–µ–º—è']))

                text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n"
                for i, appt in enumerate(appointments, start=1):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    try:
                        date_obj = datetime.strptime(appt['–î–∞—Ç–∞'], '%Y-%m-%d')
                        formatted_date = date_obj.strftime('%d.%m.%Y')
                    except:
                        formatted_date = appt['–î–∞—Ç–∞']

                    text += f"{i}. {formatted_date} –≤ {appt['–í—Ä–µ–º—è']}\n"

                keyboard = types.InlineKeyboardMarkup()
                for i, appt in enumerate(appointments, start=1):
                    appt_id = appt['id']
                    keyboard.row(
                        types.InlineKeyboardButton(f"‚úèÔ∏è {i}", callback_data=f"reschedappt_{appt_id}"),
                        types.InlineKeyboardButton(f"‚ùå {i}", callback_data=f"cancelappt_{appt_id}")
                    )
                keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel"))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ –º–æ–∂–µ–º
                with bot.retrieve_data(user_id, chat_id) as data:
                    orig_msg_id = data.get('appointments_message_id')

                if orig_msg_id:
                    try:
                        bot.edit_message_text(text, chat_id, orig_msg_id, reply_markup=keyboard)
                    except Exception as e_edit:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        bot.send_message(chat_id, text, reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, text, reply_markup=keyboard)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö
                with bot.retrieve_data(user_id, chat_id) as data:
                    data['appointments'] = appointments
                    data['appointments_text'] = text
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
                bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=get_client_menu_keyboard())

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–º–µ–Ω—ã
            try:
                bot.edit_message_text("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id, call.message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ confirm_cancel_appointment: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.")

    @bot.callback_query_handler(func=lambda call: call.data == "cancelcancel")
    def cancel_cancel_request(call):
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö
            with bot.retrieve_data(user_id, chat_id) as data:
                appointments = data.get('appointments', [])
                orig_msg_id = data.get('appointments_message_id')
                original_text = data.get('appointments_text', "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n")

            if not appointments or not orig_msg_id:
                bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
            keyboard = types.InlineKeyboardMarkup()
            for i, appt in enumerate(appointments, start=1):
                sid = appt['id']
                keyboard.row(
                    types.InlineKeyboardButton(f"‚úèÔ∏è {i}", callback_data=f"reschedappt_{sid}"),
                    types.InlineKeyboardButton(f"‚ùå {i}", callback_data=f"cancelappt_{sid}")
                )
            keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel"))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
            try:
                bot.edit_message_reply_markup(chat_id, orig_msg_id, reply_markup=keyboard)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                bot.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", chat_id, call.message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ cancel_cancel_request: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("reschedappt_"))
    def reschedule_appointment_request(call):
        """
        –í—ã–±–æ—Ä –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        """
        try:
            slot_id = call.data.split('_')[1]
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏
            with bot.retrieve_data(user_id, chat_id) as data:
                appointments = data.get('appointments', [])

            appt = None
            for a in appointments:
                if str(a.get('id')) == str(slot_id):
                    appt = a
                    break

            if not appt:
                bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                date_obj = datetime.strptime(appt['–î–∞—Ç–∞'], '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d.%m.%Y')
            except:
                formatted_date = appt['–î–∞—Ç–∞']

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
            client = sheets_service.get_client_by_telegram_id(user_id)
            if not client:
                bot.answer_callback_query(call.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                bot.edit_message_reply_markup(chat_id, call.message.message_id)
            except Exception as e_edit:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e_edit}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            with bot.retrieve_data(user_id, chat_id) as data:
                data['reschedule_slot_id'] = slot_id
                data['reschedule_date'] = appt['–î–∞—Ç–∞']
                data['reschedule_time'] = appt['–í—Ä–µ–º—è']
                data['reschedule_formatted_date'] = formatted_date
                data['specialist_id'] = appt['id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞']
                data['appointments_message_id'] = call.message.message_id

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –Ω–æ–≤–æ–π –¥–∞—Ç—ã
            bot.set_state(user_id, ClientStates.rescheduling_select_date, chat_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
            bot.send_message(
                chat_id, 
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å —Å {formatted_date} –≤ {appt['–í—Ä–µ–º—è']}. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:"
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            service_duration = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç

            # –ù–∞–π–¥–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            appointment_slots = []
            current_date = appt['–î–∞—Ç–∞']
            client_id = str(client['id'])
            all_slots = sheets_service.schedule_sheet.get_all_records()

            for slot in all_slots:
                if (slot.get('–î–∞—Ç–∞') == current_date and 
                    str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(appt['id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞']) and
                    str(slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')) == client_id):
                    appointment_slots.append(slot)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            appointment_slots.sort(key=lambda s: s['–í—Ä–µ–º—è'])

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤, –≤—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if len(appointment_slots) > 1:
                try:
                    first_time = datetime.strptime(appointment_slots[0]['–í—Ä–µ–º—è'], '%H:%M')
                    last_time = datetime.strptime(appointment_slots[-1]['–í—Ä–µ–º—è'], '%H:%M')
                    diff_minutes = (last_time - first_time).seconds // 60 + 30  # +30 –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ—Ç–∞
                    service_duration = diff_minutes
                except Exception as e_time:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏: {e_time}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            with bot.retrieve_data(user_id, chat_id) as data:
                data['service_duration'] = service_duration

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã
            today = date.today()
            year, month = today.year, today.month

            # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
            create_date_calendar(bot, chat_id, year, month, service_duration, 
                             appt['id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'], sheets_service, scheduler_service)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ reschedule_appointment_request: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("bookdate_"), state=ClientStates.rescheduling_select_date)
    def select_reschedule_date(call):
        """–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏"""
        try:
            _, year, month, day = call.data.split('_')
            year, month, day = int(year), int(month), int(day)
            date_str = f"{year}-{month:02d}-{day:02d}"
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with bot.retrieve_data(user_id, chat_id) as data:
                specialist_id = data.get('specialist_id')
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
                service_duration = data.get('service_duration', 30)

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            date_str = normalize_date(date_str)

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            available_slots = sheets_service.get_available_slots(specialist_id, date_str)
            if not available_slots:
                bot.answer_callback_query(call.id, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –Ω–∞ —ç—Ç—É –¥–∞—Ç—É")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏
            has_slots = check_consecutive_slots(available_slots, service_duration)
            if not has_slots:
                bot.answer_callback_query(call.id, text="–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏")
                return

            # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e_del:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e_del}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
            bot.set_state(user_id, ClientStates.rescheduling_select_time, chat_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            with bot.retrieve_data(user_id, chat_id) as data:
                data['new_date'] = date_str
                try:
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    data['new_formatted_date'] = date_obj.strftime('%d.%m.%Y')
                except:
                    data['new_formatted_date'] = date_str

            # –ï—Å–ª–∏ –µ—Å—Ç—å scheduler_service –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏
            if scheduler_service and service_duration:
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                available_times = scheduler_service.get_available_times(
                    specialist_id, date_str, service_duration
                )

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏
                keyboard = types.InlineKeyboardMarkup()
                for time_str in available_times:
                    keyboard.add(types.InlineKeyboardButton(
                        time_str, callback_data=f"reschedtime_{time_str}"
                    ))
                keyboard.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))

                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
                bot.answer_callback_query(call.id)
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç scheduler_service
            # –ü–æ–¥–±–∏—Ä–∞–µ–º —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
            slot_count = max(1, (service_duration + 29) // 30)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

            # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ (–≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
            slots_by_time = []
            for slot in available_slots:
                try:
                    h, m = map(int, slot['–í—Ä–µ–º—è'].split(':'))
                    time_val = h*60 + m
                    slots_by_time.append((time_val, slot['id']))
                except (ValueError, KeyError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞: {e}")
                    continue

            slots_by_time.sort()

            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            options = []
            for i in range(len(slots_by_time) - slot_count + 1):
                seq = [slots_by_time[i]]
                contiguous = True
                for j in range(1, slot_count):
                    if i+j >= len(slots_by_time):
                        contiguous = False
                        break
                    prev_time = slots_by_time[i+j-1][0]
                    curr_time = slots_by_time[i+j][0]
                    diff = curr_time - prev_time
                    if diff != 30:
                        contiguous = False
                        break

                if contiguous:
                    seq_ids = [slots_by_time[i+k][1] for k in range(slot_count)]
                    start_minutes = slots_by_time[i][0]
                    end_minutes = start_minutes + service_duration
                    start_h = start_minutes // 60
                    start_m = start_minutes % 60
                    end_h = end_minutes // 60
                    end_m = end_minutes % 60
                    start_time_str = f"{start_h:02d}:{start_m:02d}"
                    end_time_str = f"{end_h:02d}:{end_m:02d}"
                    label = f"{start_time_str}" if slot_count == 1 else f"{start_time_str}-{end_time_str}"
                    options.append((label, seq_ids))

            if not options:
                bot.answer_callback_query(call.id, text="–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ—Ç–æ–≤
            with bot.retrieve_data(user_id, chat_id) as data:
                data['booking_options'] = {str(ids[0]): ids for _, ids in options}

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏
            keyboard = types.InlineKeyboardMarkup()
            for label, seq_ids in options:
                first_id = seq_ids[0]
                keyboard.add(types.InlineKeyboardButton(label, callback_data=f"reschedtime_{first_id}"))
            keyboard.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))

            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ select_reschedule_date: {e}", exc_info=True)
            bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("reschedtime_"), state=ClientStates.rescheduling_select_time)
    def select_reschedule_time(call):
        """
        –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
        """
        try:
            time_data = call.data.split('_')[1]
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with bot.retrieve_data(user_id, chat_id) as data:
                old_slot_id = data.get('reschedule_slot_id')
                old_date = data.get('reschedule_formatted_date')
                old_time = data.get('reschedule_time')
                new_date = data.get('new_formatted_date')
                specialist_id = data.get('specialist_id')
                new_date_raw = data.get('new_date')
                service_duration = data.get('service_duration', 30)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏
            if scheduler_service and ':' in time_data:  # –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                new_time = time_data
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–ª–æ—Ç–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                slot_ids = scheduler_service.get_slot_ids_for_booking(
                    specialist_id, new_date_raw, new_time, service_duration
                )
                if not slot_ids:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return
                new_slot_id = slot_ids[0]  # –ë–µ—Ä–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞
            else:  # –í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ—Ç –ø–æ ID
                new_slot_id = time_data
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
                all_slots = sheets_service.schedule_sheet.get_all_records()
                new_time = None
                for slot in all_slots:
                    if str(slot.get('id')) == str(new_slot_id):
                        new_time = slot.get('–í—Ä–µ–º—è')
                        break

                if not new_time:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_text = (
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å —Å {old_date} {old_time} –Ω–∞ {new_date} {new_time}. "
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirmreschedule_{old_slot_id}_{new_slot_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancelreschedule")
            )

            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            bot.edit_message_text(confirm_text, chat_id, call.message.message_id, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ select_reschedule_time: {e}", exc_info=True)
            bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirmreschedule_"))
    def confirm_reschedule(call):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–ª–æ—Ç–æ–≤
            _, old_slot_id, new_slot_id = call.data.split('_')
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with bot.retrieve_data(user_id, chat_id) as data:
                old_date = data.get('reschedule_formatted_date')
                old_time = data.get('reschedule_time')
                new_date = data.get('new_formatted_date')
                appointments_message_id = data.get('appointments_message_id')

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client = sheets_service.get_client_by_telegram_id(user_id)
            if not client:
                bot.answer_callback_query(call.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            client_id = client['id']

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏
            all_slots = sheets_service.schedule_sheet.get_all_records()
            new_time = None
            specialist_id = None
            for slot in all_slots:
                if str(slot.get('id')) == str(new_slot_id):
                    new_time = slot.get('–í—Ä–µ–º—è')
                    specialist_id = slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
                    break

            if not new_time:
                bot.answer_callback_query(call.id, "–í—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏
            # 1. –ë—Ä–æ–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
            booking_success = sheets_service.book_appointment(new_slot_id, client_id)
            if not booking_success:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
                return

            # 2. –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ª–æ—Ç
            cancel_success = sheets_service.cancel_appointment(old_slot_id)
            if not cancel_success:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å, –æ—Ç–º–µ–Ω—è–µ–º –∏ –Ω–æ–≤—É—é
                sheets_service.cancel_appointment(new_slot_id)
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏.")
                return

            # –ü–µ—Ä–µ–Ω–æ—Å —É—Å–ø–µ—à–µ–Ω
            success_message = f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ —Å {old_date} {old_time} –Ω–∞ {new_date} {new_time}."
            bot.edit_message_text(success_message, chat_id, call.message.message_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if appointments_message_id:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
                appointments = sheets_service.get_client_appointments(client_id)
                if appointments:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
                    appointments.sort(key=lambda a: (a['–î–∞—Ç–∞'], a['–í—Ä–µ–º—è']))

                    text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n"
                    for i, appt in enumerate(appointments, start=1):
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                        try:
                            date_obj = datetime.strptime(appt['–î–∞—Ç–∞'], '%Y-%m-%d')
                            formatted_date = date_obj.strftime('%d.%m.%Y')
                        except:
                            formatted_date = appt['–î–∞—Ç–∞']

                        text += f"{i}. {formatted_date} –≤ {appt['–í—Ä–µ–º—è']}\n"

                    keyboard = types.InlineKeyboardMarkup()
                    for i, appt in enumerate(appointments, start=1):
                        appt_id = appt['id']
                        keyboard.row(
                            types.InlineKeyboardButton(f"‚úèÔ∏è {i}", callback_data=f"reschedappt_{appt_id}"),
                            types.InlineKeyboardButton(f"‚ùå {i}", callback_data=f"cancelappt_{appt_id}")
                        )
                    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel"))

                    try:
                        bot.edit_message_text(text, chat_id, appointments_message_id, reply_markup=keyboard)
                    except Exception as e_edit:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π: {e_edit}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö
                    with bot.retrieve_data(user_id, chat_id) as data:
                        data['appointments'] = appointments
                        data['appointments_text'] = text

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.delete_state(user_id, chat_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
            if specialist_id:
                specialist = sheets_service.get_specialist_by_id(specialist_id)
                if specialist and specialist.get('Telegram_ID'):
                    try:
                        specialist_telegram_id = specialist.get('Telegram_ID')
                        notification_text = (
                            f"–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏!\n"
                            f"–ö–ª–∏–µ–Ω—Ç: {client.get('–ò–º—è', '–ö–ª–∏–µ–Ω—Ç')}\n"
                            f"–°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: {old_date} {old_time}\n"
                            f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {new_date} {new_time}\n"
                            f"–¢–µ–ª–µ—Ñ–æ–Ω: {client.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                        )
                        bot.send_message(specialist_telegram_id, notification_text)
                    except Exception as notify_err:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {notify_err}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ confirm_reschedule: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏.")
            bot.delete_state(call.from_user.id, call.message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data == "cancelreschedule")
    def cancel_reschedule(call):
        """
        –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
        """
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.delete_state(user_id, chat_id)

            # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
            bot.edit_message_text("–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω.", chat_id, call.message.message_id)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            with bot.retrieve_data(user_id, chat_id) as data:
                appointments = data.get('appointments', [])
                appointments_message_id = data.get('appointments_message_id')
                appointments_text = data.get('appointments_text', "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n")

            if appointments and appointments_message_id:
                keyboard = types.InlineKeyboardMarkup()
                for i, appt in enumerate(appointments, start=1):
                    appt_id = appt['id']
                    keyboard.row(
                        types.InlineKeyboardButton(f"‚úèÔ∏è {i}", callback_data=f"reschedappt_{appt_id}"),
                        types.InlineKeyboardButton(f"‚ùå {i}", callback_data=f"cancelappt_{appt_id}")
                    )
                keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel"))

                try:
                    bot.edit_message_reply_markup(chat_id, appointments_message_id, reply_markup=keyboard)
                except Exception as e_edit:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e_edit}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ cancel_reschedule: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")

    @bot.callback_query_handler(func=lambda call: call.data == "cancel")
    def cancel_callback(call):
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                bot.delete_state(user_id, chat_id)
            except Exception as e_state:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e_state}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
            client = sheets_service.get_client_by_telegram_id(user_id)
            if client:
                # –ö–ª–∏–µ–Ω—Ç
                bot.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", chat_id, call.message.message_id)
                bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_client_menu_keyboard())
                return

            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if specialist:
                # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
                from handlers.specialist import get_specialist_menu_keyboard
                bot.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", chat_id, call.message.message_id)
                bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_specialist_menu_keyboard())
                return

            # –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            bot.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", chat_id, call.message.message_id)
            bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_start_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ cancel: {e}", exc_info=True)
            bot.answer_callback_query(call.id)

    @bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    def info_handler(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
        """
        client = sheets_service.get_client_by_telegram_id(message.from_user.id)
        if not client:
            bot.send_message(
                message.chat.id,
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                    types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                )
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
        specialist_id = client['id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞']
        specialist = sheets_service.get_specialist_by_id(specialist_id)

        info_text = "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏\n\n"

        if specialist:
            info_text += f"–í–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {specialist.get('–ò–º—è', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            info_text += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialist.get('–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ª—É–≥–∞—Ö
        services = sheets_service.get_specialist_services(specialist_id)
        if services:
            info_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n"
            for svc in services:
                name = svc.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                duration = svc.get('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '')
                cost = svc.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', '')
                info_text += f"‚Ä¢ {name} ({duration} –º–∏–Ω, {cost} —Ä—É–±)\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –∏ FAQ
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review"))
        keyboard.add(types.InlineKeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="show_faq"))
        keyboard.add(types.InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_support"))

        bot.send_message(message.chat.id, info_text, reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data == "show_faq")
    def show_faq(call):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç FAQ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ –∫–ª–∏–µ–Ω—Ç–∞
            from utils.faq_client import client_faq

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ FAQ
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            for i, section in enumerate(client_faq.keys()):
                keyboard.add(types.InlineKeyboardButton(section, callback_data=f"faq_section_{i}"))

            keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_info"))

            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )

            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ FAQ: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("faq_section_"))
    def show_faq_section(call):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª FAQ
        """
        try:
            section_index = int(call.data.split("_")[2])
            from utils.faq_client import client_faq

            sections = list(client_faq.keys())
            if section_index < 0 or section_index >= len(sections):
                bot.answer_callback_query(call.id, "–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            section_name = sections[section_index]
            section_content = client_faq[section_name]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞
            text = f"<b>{section_name}</b>\n\n{section_content}\n\n"
            text += "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –Ω–∞–ø—Ä—è–º—É—é –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ."

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq"))
            keyboard.add(types.InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_support"))

            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞–∑–¥–µ–ª–∞ FAQ: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞")

    @bot.callback_query_handler(func=lambda call: call.data == "back_to_info")
    def back_to_info(call):
        """
        –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        """
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(call.message.chat.id, call.message.message_id)
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            info_handler_content = info_handler(call.message)
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data == "ask_support")
    def ask_support_request(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ"
        """
        try:
            bot.edit_message_text(
               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:",
                call.message.chat.id,
                call.message.message_id
            )

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
            bot.set_state(call.from_user.id, ClientStates.waiting_for_support_question, call.message.chat.id)
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")

    @bot.message_handler(state=ClientStates.waiting_for_support_question)
    def process_support_question(message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
        """
        try:
            question = message.text.strip()
            user_id = message.from_user.id
            username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}"

            if not question:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client = sheets_service.get_client_by_telegram_id(user_id)
            client_info = ""
            if client:
                client_info = f"–ö–ª–∏–µ–Ω—Ç: {client.get('–ò–º—è', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\nID: {client['id']}\n–¢–µ–ª: {client.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = (
                f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                f"–û—Ç: {username} (Telegram ID: {user_id})\n"
                f"{client_info}\n\n"
                f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
                f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /reply {user_id} [–≤–∞—à –æ—Ç–≤–µ—Ç]"
            )

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ settings –∏–ª–∏ constants
            try:
                from settings import ADMIN_IDS
                admin_ids = ADMIN_IDS
            except ImportError:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –≤ settings, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π ID
                admin_ids = [611331106]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∑–∞–¥–∞–Ω–∏—è

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            sent = False
            for admin_id in admin_ids:
                try:
                    bot.send_message(admin_id, admin_message)
                    sent = True
                except Exception as admin_err:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {admin_err}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            if sent:
                bot.send_message(
                    message.chat.id, 
                    "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=get_client_menu_keyboard()
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_client_menu_keyboard()
                )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.delete_state(user_id, message.chat.id)

            # –õ–æ–≥–∏—Ä—É–µ–º
            logging_service.log_message(user_id, username, f"–û—Ç–ø—Ä–∞–≤–∏–ª –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {question}", "user")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: {e}", exc_info=True)
            bot.send_message(
                message.chat.id, 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_client_menu_keyboard()
            )
            bot.delete_state(message.from_user.id, message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data == "leave_review")
    def leave_review_request(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
        """
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
        client = sheets_service.get_client_by_telegram_id(user_id)
        if not client:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ
        bot.set_state(user_id, ClientStates.rating_service, chat_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
        keyboard.row(
            types.KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"),
            types.KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê"),
            types.KeyboardButton("‚≠ê‚≠ê‚≠ê"),
            types.KeyboardButton("‚≠ê‚≠ê"),
            types.KeyboardButton("‚≠ê")
        )
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"))

        bot.send_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥:",
            reply_markup=keyboard
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(chat_id, call.message.message_id)
        except:
            pass

    @bot.message_handler(state=ClientStates.rating_service)
    def process_rating(message):
        try:
            rating_text = message.text.strip()

            if rating_text == "–û—Ç–º–µ–Ω–∏—Ç—å":
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(
                    message.chat.id,
                    "–û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                    reply_markup=get_client_menu_keyboard()
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
            rating_map = {
                "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê": 5,
                "‚≠ê‚≠ê‚≠ê‚≠ê": 4,
                "‚≠ê‚≠ê‚≠ê": 3,
                "‚≠ê‚≠ê": 2,
                "‚≠ê": 1
            }

            rating = rating_map.get(rating_text)
            if not rating:
                # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –Ω–∞–ø—Ä—è–º—É—é
                try:
                    rating = int(rating_text)
                    if rating < 1 or rating > 5:
                        raise ValueError("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
                except:
                    bot.send_message(
                        message.chat.id,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å':"
                    )
                    return

            user_id = message.from_user.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ
            client = sheets_service.get_client_by_telegram_id(user_id)
            if not client:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                bot.delete_state(user_id, message.chat.id)
                return

            client_id = client['id']
            specialist_id = client['id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            with bot.retrieve_data(user_id, message.chat.id) as data:
                data['rating'] = rating

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            bot.set_state(user_id, ClientStates.writing_review, message.chat.id)
            bot.send_message(
                message.chat.id,
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è?",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).row(
                    types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
                )
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_rating: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(state=ClientStates.writing_review)
    def process_review(message):
        try:
            text = message.text.strip()
            user_id = message.from_user.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
            client = sheets_service.get_client_by_telegram_id(user_id)
            if not client:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                bot.delete_state(user_id, message.chat.id)
                return

            client_id = client['id']
            specialist_id = client['id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞']

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with bot.retrieve_data(user_id, message.chat.id) as data:
                rating = data.get('rating', 5)

            # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            comment = "" if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else text

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
            success = sheets_service.add_review(client_id, specialist_id, rating, comment)

            if success:
                bot.send_message(
                    message.chat.id,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
                    reply_markup=get_client_menu_keyboard()
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
                if specialist_id:
                    specialist = sheets_service.get_specialist_by_id(specialist_id)
                    if specialist and specialist.get('Telegram_ID'):
                        try:
                            specialist_telegram_id = specialist.get('Telegram_ID')
                            stars = "‚≠ê" * rating

                            notification_text = (
                                f"‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client.get('–ò–º—è', '–ö–ª–∏–µ–Ω—Ç')}!\n\n"
                                f"–û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)\n"
                            )

                            if comment:
                                notification_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

                            bot.send_message(specialist_telegram_id, notification_text)
                        except Exception as notify_err:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ: {notify_err}")
            else:
                bot.send_message(
                    message.chat.id,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_client_menu_keyboard()
                )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.delete_state(user_id, message.chat.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_review: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)