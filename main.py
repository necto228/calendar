# main.py
import logging
import os
import telebot
from telebot import types, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import signal
import sys

from settings import TOKEN, WEBHOOK_URL
from handlers import client, specialist, common
from services.google_sheets import GoogleSheetsService
from services.logger import LoggingService
from services.scheduler import SchedulerService

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
log_dir = os.path.join(os.getcwd(), 'logs')
if os.path.exists(log_dir) and not os.path.isdir(log_dir):
    try:
        os.remove(log_dir)
        print(f"–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª logs (–æ–Ω –Ω–µ –±—ã–ª –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π).")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ logs: {e}")

if not os.path.exists(log_dir):
    try:
        os.makedirs(log_dir, exist_ok=True)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {log_dir}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤: {e}")

log_file = os.path.join(log_dir, 'main.log')
handlers = [logging.StreamHandler()]
if os.path.exists(log_dir) and os.path.isdir(log_dir):
    handlers.append(logging.FileHandler(log_file, encoding='utf-8'))

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=handlers)
logger = logging.getLogger(__name__)

# FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
state_storage = StateMemoryStorage()
bot = telebot.TeleBot(TOKEN, state_storage=state_storage)

# –î–æ–±–∞–≤–ª—è–µ–º StateFilter
bot.add_custom_filter(custom_filters.StateFilter(bot))

# –°–µ—Ä–≤–∏—Å—ã
sheets_service = GoogleSheetsService()
logging_service = LoggingService(sheets_service)
scheduler_service = SchedulerService(sheets_service, bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–æ–ª–±—ç–∫–∏)
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_visit_"))
def confirm_visit_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    try:
        reminder_id = call.data.split("_")[2]
        user_id = call.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
        reminder = sheets_service.get_reminder_by_id(reminder_id)
        if reminder:
            appointment_id = reminder.get('id_–∑–∞–ø–∏—Å–∏')
            if appointment_id:
                sheets_service.update_appointment_confirmation(appointment_id, True)
                
            sheets_service.update_reminder_status(reminder_id, 'confirmed')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ñ–¥–µ–º –≤–∞—Å –Ω–∞ –ø—Ä–∏–µ–º–µ.",
                call.message.chat.id,
                call.message.message_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
            specialist_id = reminder.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
            if specialist_id:
                specialist = sheets_service.get_specialist_by_id(specialist_id)
                if specialist and specialist.get('Telegram_ID'):
                    client = sheets_service.get_client_by_id(reminder.get('id_–∫–ª–∏–µ–Ω—Ç–∞'))
                    client_name = client.get('–ò–º—è', '–ö–ª–∏–µ–Ω—Ç') if client else '–ö–ª–∏–µ–Ω—Ç'
                    
                    try:
                        date_str = scheduler_service.format_date(reminder.get('–î–∞—Ç–∞', ''))
                        time_str = reminder.get('–í—Ä–µ–º—è', '')
                        
                        notification = (
                            f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ {date_str} "
                            f"–≤ {time_str}"
                        )
                        
                        bot.send_message(specialist.get('Telegram_ID'), notification)
                    except Exception as e_notify:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e_notify}")
        
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_visit_"))
def cancel_visit_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        reminder_id = call.data.split("_")[2]
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder = sheets_service.get_reminder_by_id(reminder_id)
        if reminder:
            appointment_id = reminder.get('id_–∑–∞–ø–∏—Å–∏')
            if appointment_id:
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
                success = sheets_service.cancel_appointment(appointment_id)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    sheets_service.update_reminder_status(reminder_id, 'cancelled')
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    bot.edit_message_text(
                        "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                        call.message.chat.id,
                        call.message.message_id
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                    specialist_id = reminder.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
                    if specialist_id:
                        specialist = sheets_service.get_specialist_by_id(specialist_id)
                        if specialist and specialist.get('Telegram_ID'):
                            client = sheets_service.get_client_by_id(reminder.get('id_–∫–ª–∏–µ–Ω—Ç–∞'))
                            client_name = client.get('–ò–º—è', '–ö–ª–∏–µ–Ω—Ç') if client else '–ö–ª–∏–µ–Ω—Ç'
                            
                            try:
                                date_str = scheduler_service.format_date(reminder.get('–î–∞—Ç–∞', ''))
                                time_str = reminder.get('–í—Ä–µ–º—è', '')
                                
                                notification = (
                                    f"‚ùå –ö–ª–∏–µ–Ω—Ç {client_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ {date_str} "
                                    f"–≤ {time_str}"
                                )
                                
                                bot.send_message(specialist.get('Telegram_ID'), notification)
                            except Exception as e_notify:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e_notify}")
                else:
                    bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
                    return
            else:
                bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
        else:
            bot.answer_callback_query(call.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("rate_"))
def rate_appointment_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ –≤–∏–∑–∏—Ç–∞"""
    try:
        parts = call.data.split("_")
        rating = int(parts[1])
        appointment_id = parts[2]
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = sheets_service.get_client_by_telegram_id(user_id)
        if not client:
            bot.answer_callback_query(call.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        client_id = client.get('id')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        appointment = sheets_service.get_appointment_by_id(appointment_id)
        if not appointment:
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        specialist_id = appointment.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        review_id = sheets_service.add_review(client_id, specialist_id, rating, "")
        
        if review_id:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(
                telebot.types.InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"comment_{review_id}"),
                telebot.types.InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–≤–µ–∑–¥
            stars = "‚≠ê" * rating
            
            bot.edit_message_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {stars} ({rating}/5)! –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
            specialist = sheets_service.get_specialist_by_id(specialist_id)
            if specialist and specialist.get('Telegram_ID'):
                try:
                    notification = (
                        f"‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client.get('–ò–º—è', '–ö–ª–∏–µ–Ω—Ç')}!\n\n"
                        f"–û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)\n"
                    )
                    
                    bot.send_message(specialist.get('Telegram_ID'), notification)
                except Exception as e_notify:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e_notify}")
        else:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—Ü–µ–Ω–∫–∏ –≤–∏–∑–∏—Ç–∞: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("comment_"))
def comment_review_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É"""
    try:
        review_id = call.data.split("_")[1]
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        bot.set_state(call.from_user.id, client.ClientStates.writing_review, call.message.chat.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–∑—ã–≤–∞
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['review_id'] = review_id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        bot.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:",
            call.message.chat.id,
            call.message.message_id
        )
        
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
        
        bot.send_message(
            call.message.chat.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=markup
        )
        
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "skip_comment")
def skip_comment_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
        from utils.keyboards import get_client_menu_keyboard
        
        bot.edit_message_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
            call.message.chat.id,
            call.message.message_id
        )
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=get_client_menu_keyboard()
        )
        
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
logger.info(
    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {len(bot.message_handlers)}")

# –í–∞–∂–Ω–æ! –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, 
# –∑–∞—Ç–µ–º –æ–±—â–∏–µ
client.register_handlers(bot, sheets_service, logging_service, scheduler_service)
logger.info(
    f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ client: {len(bot.message_handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

specialist.register_handlers(bot, sheets_service, logging_service, scheduler_service)
logger.info(
    f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ specialist: {len(bot.message_handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

common.register_handlers(bot, sheets_service, logging_service, scheduler_service)
logger.info(
    f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ common: {len(bot.message_handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_handlers = {}
for h in bot.message_handlers:
    if hasattr(h, 'filters') and hasattr(h.filters, 'state'):
        st = str(h.filters.state)
        if st in state_handlers:
            logger.warning(f"–ö–û–ù–§–õ–ò–ö–¢: –ù–µ—Å–∫–æ–ª—å–∫–æ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {st}")
        else:
            state_handlers[st] = h

logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º: {list(state_handlers.keys())}")

app = FastAPI()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def shutdown_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    scheduler_service.stop_scheduler()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    shutdown_handler()
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã FastAPI"""
    shutdown_handler()

@app.get("/")
async def index():
    logging.info(
        "–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –µ—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    )
    return JSONResponse({"message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"})


@app.get("/webhook")
async def webhook_get():
    return JSONResponse({
        "message":
        "–í–µ–±—Ö—É–∫ –¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤."
    })


@app.post("/webhook")
async def webhook(request: Request):
    if request.headers.get("content-type") != "application/json":
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

    json_bytes = await request.body()
    json_string = json_bytes.decode("utf-8")

    try:
        logger.info(f"WEBHOOK: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {json_string[:100]}...")
        update = types.Update.de_json(json_string)

        # –õ–æ–≥ –≤—Ö–æ–¥—è—â–µ–≥–æ
        if update.message and update.message.text:
            user_id = update.message.from_user.id
            chat_id = update.message.chat.id
            username = update.message.from_user.username or f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}"
            logger.info(
                f"WEBHOOK: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} ({username}): {update.message.text}"
            )
            logging_service.log_message(user_id, username, update.message.text,
                                        'user')

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ send_message
        if not hasattr(bot, 'original_send_message'):
            bot.original_send_message = bot.send_message
            logger.info("WEBHOOK: –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º send_message –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

            def logged_send_message(chat_id, text, *args, **kwargs):
                try:
                    logger.info(
                        f"WEBHOOK: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {text[:50]}..."
                    )
                    logging_service.log_message(chat_id, 'bot', text, 'bot')
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                return bot.original_send_message(chat_id, text, *args,
                                                 **kwargs)

            bot.send_message = logged_send_message

        logger.info("WEBHOOK: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        if update.message and update.message.from_user:
            try:
                uid = update.message.from_user.id
                ch = update.message.chat.id
                cur_state = bot.get_state(uid, ch)
                logger.info(
                    f"WEBHOOK: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {cur_state}"
                )

                # –í—ã–≤–µ–¥–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ message_handlers
                hlist = bot.message_handlers.copy()
                logger.info(f"WEBHOOK: –í—Å–µ–≥–æ {len(hlist)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
                for hh in hlist:
                    if hasattr(hh, 'filters') and hasattr(hh.filters, 'state'):
                        logger.info(f" - —Ö–µ–Ω–¥–ª–µ—Ä —Å–æ state={hh.filters.state}")

            except Exception as st_err:
                logger.error(f"WEBHOOK: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {st_err}")

        # –ü–µ—Ä–µ–¥–∞—ë–º –≤ TeleBot
        logger.info(f"WEBHOOK: process_new_updates({update.update_id})")
        bot.process_new_updates([update])
        logger.info("WEBHOOK: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
        raise HTTPException(status_code=500,
                            detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    return JSONResponse({"status": "ok"})


def setup_webhook():
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {WEBHOOK_URL}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    scheduler_service.start_scheduler(bot)
    
    setup_webhook()

    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080, reload=True)