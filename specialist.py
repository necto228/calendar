# handlers/specialist.py
import logging
import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup
from datetime import datetime, date, timedelta
import calendar
import re

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
class SpecialistStates(StatesGroup):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    waiting_for_name = State()
    waiting_for_specialization = State()
    waiting_for_timezone = State()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    waiting_for_month_selection = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    waiting_for_standard_days = State()
    waiting_for_standard_start = State()
    waiting_for_standard_end = State()
    waiting_for_standard_break = State()
    waiting_for_schedule_confirmation = State()  # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–æ–±—ã—Ö –¥–Ω–µ–π
    waiting_for_special_date = State()
    waiting_for_special_option = State()
    waiting_for_special_start = State()
    waiting_for_special_end = State()

    # –†–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    waiting_for_calendar_action = State()
    waiting_for_slot_time = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª—É–≥
    waiting_for_service_name = State()
    waiting_for_service_duration = State()
    waiting_for_service_price = State()

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    waiting_for_recipients_choice = State()
    waiting_for_broadcast_date = State()
    waiting_for_message_text = State()
    waiting_for_message_text_confirm = State()

    # –í–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    waiting_for_support_question = State()

    # –ü—Ä–æ—á–µ–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    waiting_for_referral_stats = State()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def get_specialist_menu_keyboard():
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    markup.add("üìÖ –ú–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "üìÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
    markup.add("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üïí –ó–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –≤—Ä–µ–º—è")
    
    # –ú–µ–Ω–µ–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –ø–æ–¥–º–µ–Ω—é
    markup.add("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", "‚ùì FAQ")
    
    return markup

def get_additional_functions_keyboard():
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª—É–≥", "üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã")
    markup.add("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
    markup.add("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
    return markup

def get_schedule_menu_keyboard():
    """
    –ú–µ–Ω—é "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÜ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    markup.add("üìå –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–æ–±—ã–µ –¥–Ω–∏")
    markup.add("üïí –ó–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –≤—Ä–µ–º—è")
    markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
    return markup


def get_working_days_keyboard(selected_days):
    """
    –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.
    –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –ø–æ–º–µ—á–∞—é—Ç—Å—è –≥–∞–ª–æ—á–∫–æ–π.
    """
    days_of_week = [
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for day in days_of_week:
        btn_text = f"‚úÖ {day}" if day in selected_days else day
        keyboard.add(types.InlineKeyboardButton(btn_text, callback_data=f"toggle_work_{day}"))
    keyboard.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="working_days_done"))
    return keyboard

def normalize_date(date_str):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã.
    –ü—Ä–∏–≤–æ–¥–∏—Ç –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
    """
    if not date_str:
        return ""

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã, —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
    date_str = date_str.strip().strip("'").strip('"')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        for fmt in ['%Y-%m-%d', '%d.%m.%Y', '%Y/%m/%d', '%d-%m-%Y']:
            try:
                date_obj = datetime.strptime(date_str, fmt)
                return date_obj.strftime('%Y-%m-%d')
            except ValueError:
                continue

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å —Å—Ç—Ä–æ–∫—É
        if '/' in date_str:
            parts = date_str.split('/')
        elif '-' in date_str:
            parts = date_str.split('-')
        elif '.' in date_str:
            parts = date_str.split('.')
        else:
            # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return date_str

        if len(parts) == 3:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø–æ –¥–ª–∏–Ω–µ –≥–æ–¥–∞
            if len(parts[0]) == 4:  # –ì–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å
                return f"{parts[0]}-{int(parts[1]):02d}-{int(parts[2]):02d}"
            elif len(parts[2]) == 4:  # –î–µ–Ω—å-–º–µ—Å—è—Ü-–≥–æ–¥
                return f"{parts[2]}-{int(parts[1]):02d}-{int(parts[0]):02d}"

        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return date_str
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç—ã '{date_str}': {e}")
        return date_str

def get_calendar_keyboard(year, month, selected_dates=None, specialist_id=None, sheets_service=None, mode="select"):
    """
    –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç.
    selected_dates ‚Äì –Ω–∞–±–æ—Ä –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—á–∞—é—Ç—Å—è –≥–∞–ª–æ—á–∫–æ–π.
    mode - —Ä–µ–∂–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è ("select" –∏–ª–∏ "view")
    """
    if selected_dates is None:
        selected_dates = []

    keyboard = types.InlineKeyboardMarkup(row_width=7)

    # –ö–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                  "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    month_label = f"{month_names[month - 1]} {year}"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_year = year if month > 1 else year - 1
    prev_month = month - 1 if month > 1 else 12
    next_year = year if month < 12 else year + 1
    next_month = month + 1 if month < 12 else 1

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–±–µ–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞
    mode_prefix = "view_" if mode == "view" else ""
    btn_prev = types.InlineKeyboardButton("<<", callback_data=f"{mode_prefix}calendar_nav_{prev_year}_{prev_month}")
    btn_next = types.InlineKeyboardButton(">>", callback_data=f"{mode_prefix}calendar_nav_{next_year}_{next_month}")
    btn_month = types.InlineKeyboardButton(month_label, callback_data="ignore")

    keyboard.row(btn_prev, btn_month, btn_next)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_header = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    header_btns = [types.InlineKeyboardButton(d, callback_data="ignore") for d in days_header]
    keyboard.row(*header_btns)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω—è—Ö –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    day_statuses = {}  # –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –¥–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ç–∞—Ç—É—Å (busy, free, mixed, closed)

    if mode == "view" and specialist_id and sheets_service:
        from datetime import datetime, timedelta
        start_date = datetime(year, month, 1).date()
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        if month == 12:
            end_date = datetime(year + 1, 1, 1).date() - timedelta(days=1)
        else:
            end_date = datetime(year, month + 1, 1).date() - timedelta(days=1)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        all_slots = sheets_service.schedule_sheet.get_all_records()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        specialist_slots = []
        for slot in all_slots:
            if str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(specialist_id):
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                slot_date = normalize_date(slot.get('–î–∞—Ç–∞', ''))
                slot['–î–∞—Ç–∞'] = slot_date
                specialist_slots.append(slot)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        current_date = start_date
        while current_date <= end_date:
            date_str = current_date.strftime('%Y-%m-%d')

            # –°–ª–æ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            date_slots = [s for s in specialist_slots if s.get('–î–∞—Ç–∞') == date_str]

            if date_slots:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
                busy_slots = [s for s in date_slots if s.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and s.get('id_–∫–ª–∏–µ–Ω—Ç–∞')]
                free_slots = [s for s in date_slots if s.get('–°—Ç–∞—Ç—É—Å') == '–°–≤–æ–±–æ–¥–Ω–æ']
                closed_slots = [s for s in date_slots if s.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–∫—Ä—ã—Ç–æ' or 
                              (s.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and not s.get('id_–∫–ª–∏–µ–Ω—Ç–∞'))]

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–Ω—è
                if busy_slots and (free_slots or closed_slots):
                    day_statuses[date_str] = 'mixed'  # –°–º–µ—à–∞–Ω–Ω—ã–π (–∑–∞–Ω—è—Ç—ã–µ –∏ –¥—Ä—É–≥–∏–µ —Å–ª–æ—Ç—ã)
                elif busy_slots:
                    day_statuses[date_str] = 'busy'   # –¢–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
                elif free_slots:
                    day_statuses[date_str] = 'free'   # –¢–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
                elif closed_slots:
                    day_statuses[date_str] = 'closed' # –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–ª–æ—Ç—ã

            current_date += timedelta(days=1)

    cal = calendar.monthcalendar(year, month)
    today = date.today()
    for week in cal:
        row = []
        for day_num in week:
            if day_num == 0:
                row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                date_str = f"{year}-{month:02d}-{day_num:02d}"
                btn_text = str(day_num)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∞—è –ª–∏ –¥–∞—Ç–∞
                current_date = date(year, month, day_num)
                if current_date < today:
                    row.append(types.InlineKeyboardButton(str(day_num), callback_data="ignore"))
                    continue

                # –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
                if mode == "select":
                    if date_str in selected_dates:
                        btn_text = f"‚úÖ {day_num}"
                    callback_data = f"calendar_select_{date_str}"
                else:  # view mode
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–Ω—è –∏ –º–µ–Ω—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    day_status = day_statuses.get(date_str)
                    if day_status == 'busy':
                        btn_text = f"üü¢{day_num}"  # –ó–µ–ª–µ–Ω—ã–π - —Ç–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç—ã–µ
                    elif day_status == 'free':
                        btn_text = f"‚ö™{day_num}"  # –ë–µ–ª—ã–π - —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ
                    elif day_status == 'mixed':
                        btn_text = f"üü°{day_num}"  # –ñ–µ–ª—Ç—ã–π - —Å–º–µ—à–∞–Ω–Ω—ã–µ
                    elif day_status == 'closed':
                        btn_text = f"üî¥{day_num}"  # –ö—Ä–∞—Å–Ω—ã–π - —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ

                    callback_data = f"view_day_{date_str}"

                row.append(types.InlineKeyboardButton(btn_text, callback_data=callback_data))
        keyboard.row(*row)

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if mode == "select":
        keyboard.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="calendar_done"))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        legend_text = "üü¢-–∑–∞–ø–∏—Å–∏  ‚ö™-—Å–≤–æ–±–æ–¥–Ω–æ  üü°-—Å–º–µ—à–∞–Ω–Ω–æ  üî¥-–∑–∞–∫—Ä—ã—Ç–æ"
        keyboard.add(types.InlineKeyboardButton(legend_text, callback_data="ignore"))
        keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_calendar"))

    return keyboard
def get_month_selection_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = date.today()
    current_month = today.month
    current_year = today.year
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–∏—Ö 5 –º–µ—Å—è—Ü–µ–≤
    month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                   "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    
    for i in range(6):
        month = (current_month + i - 1) % 12 + 1
        year = current_year + (current_month + i - 1) // 12
        month_name = month_names[month - 1]
        
        if i == 0:
            month_text = f"–¢–µ–∫—É—â–∏–π ({month_name})"
        else:
            month_text = f"{month_name} {year}"
            
        keyboard.add(types.InlineKeyboardButton(
            month_text, 
            callback_data=f"month_{year}_{month}"
        ))
    
    keyboard.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return keyboard


# =====================================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# =====================================
def register_handlers(bot: telebot.TeleBot, sheets_service, logging_service, scheduler_service=None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º:
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–Ω–∏, –æ—Å–æ–±—ã–µ –¥–Ω–∏)
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª—É–≥
    - –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã
    - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    """
    logger.info("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ specialist.py")

    # =========================
    # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    # =========================
    @bot.message_handler(func=lambda message: message.text == "üë®‚Äç‚öïÔ∏è –Ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
    def specialist_start(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ.
        """
        try:
            user_id = message.from_user.id
            username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}"
            logging_service.log_message(user_id, username, "–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–Ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'", 'user')

            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–æ
            try:
                bot.delete_state(user_id, message.chat.id)
            except Exception as e_del:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e_del}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if specialist:
                # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                welcome_text = (
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {specialist.get('–ò–º—è', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')}!\n"
                    "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
                )
                bot.send_message(message.chat.id, welcome_text, reply_markup=get_specialist_menu_keyboard())
                return

            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
            bot.send_message(
                message.chat.id,
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
                reply_markup=markup
            )
            bot.set_state(user_id, SpecialistStates.waiting_for_name, message.chat.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=SpecialistStates.waiting_for_name)
    def process_specialist_name(message):
        """
        –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥–µ–º –≤–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        """
        try:
            if message.text in ["üë®‚Äç‚öïÔ∏è –Ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "üë§ –Ø –∫–ª–∏–µ–Ω—Ç", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"]:
                if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
                    bot.delete_state(message.from_user.id, message.chat.id)
                    from utils.keyboards import get_start_keyboard
                    bot.send_message(
                        message.chat.id,
                        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                        reply_markup=get_start_keyboard()
                    )
                return
                
            name = message.text.strip()
            if len(name) < 2:
                bot.send_message(message.chat.id, "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤:")
                return
                
            user_id = message.from_user.id
            with bot.retrieve_data(user_id, message.chat.id) as data:
                data['name'] = name
                
            bot.set_state(user_id, SpecialistStates.waiting_for_specialization, message.chat.id)
            bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ, {name}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_specialist_name: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=SpecialistStates.waiting_for_specialization)
    def process_specialist_specialization(message):
        """
        –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥–µ–º –≤–≤–æ–¥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
                bot.delete_state(message.from_user.id, message.chat.id)
                from utils.keyboards import get_start_keyboard
                bot.send_message(
                    message.chat.id,
                    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                    reply_markup=get_start_keyboard()
                )
                return
                
            spec = message.text.strip()
            if len(spec) < 2:
                bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
                return
                
            user_id = message.from_user.id
            with bot.retrieve_data(user_id, message.chat.id) as data:
                data['specialization'] = spec
                
            bot.set_state(user_id, SpecialistStates.waiting_for_timezone, message.chat.id)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            timezones = [
                "Europe/Moscow",  # –ú–°–ö
                "Europe/Kaliningrad",  # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥
                "Europe/Samara",  # –°–∞–º–∞—Ä–∞
                "Asia/Yekaterinburg",  # –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
                "Asia/Omsk",  # –û–º—Å–∫
                "Asia/Krasnoyarsk",  # –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫
                "Asia/Irkutsk",  # –ò—Ä–∫—É—Ç—Å–∫
                "Asia/Yakutsk",  # –Ø–∫—É—Ç—Å–∫
                "Asia/Vladivostok",  # –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫
                "Asia/Kamchatka"  # –ö–∞–º—á–∞—Ç–∫–∞
            ]
            for tz in timezones:
                markup.add(types.KeyboardButton(tz))
            markup.add(types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))
            
            bot.send_message(
                message.chat.id, 
                "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Europe/Moscow'):",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_specialist_specialization: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=SpecialistStates.waiting_for_timezone)
    def process_specialist_timezone(message):
        """
        –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥–µ–º –≤–≤–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        """
        try:
            if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
                bot.delete_state(message.from_user.id, message.chat.id)
                from utils.keyboards import get_start_keyboard
                bot.send_message(
                    message.chat.id,
                    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                    reply_markup=get_start_keyboard()
                )
                return
                
            tz = message.text.strip()
            user_id = message.from_user.id
            
            with bot.retrieve_data(user_id, message.chat.id) as data:
                name = data.get('name')
                specialization = data.get('specialization')
                
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è Telegram ID
            new_id = sheets_service.add_specialist(name, specialization, tz, user_id)
            if not new_id:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                bot.delete_state(user_id, message.chat.id)
                return
                
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            bot_username = bot.get_me().username
            ref_link = f"https://t.me/{bot_username}?start=ref{new_id}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ë–î
            sheets_service.update_specialist_referral_link(new_id, ref_link)
            
            # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            welcome_text = (
                f"–û—Ç–ª–∏—á–Ω–æ, {name}!\n"
                f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ({specialization}).\n"
                "–ü–µ—Ä–≤—ã–µ 3 –º–µ—Å—è—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —É—Å–ª—É–≥–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
            )
            
            bot.send_message(
                message.chat.id,
                welcome_text,
                reply_markup=get_specialist_menu_keyboard()
            )
            bot.delete_state(user_id, message.chat.id)

            # –õ–æ–≥
            username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}"
            logging_service.log_message(user_id, username, f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ID={new_id}", "system")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_specialist_timezone: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)

    # =====================
    # 2. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–¥–º–µ–Ω—é
    # =====================
    @bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
    def back_to_specialist_menu(message):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        """
        try:
            user_id = message.from_user.id
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                bot.delete_state(user_id, message.chat.id)
            except Exception as e_del:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e_del}")
                
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return
                
            bot.send_message(
                message.chat.id,
                f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, {specialist.get('–ò–º—è', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')}.",
                reply_markup=get_specialist_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ back_to_specialist_menu: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    def additional_functions_menu(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return
            
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
                reply_markup=get_additional_functions_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ additional_functions_menu: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(func=lambda m: m.text == "üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π")
    def subscription_management(message):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return
            
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ
            # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
            today = date.today()
            # –î–∞—Ç–∞ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
            three_months_later = today + timedelta(days=90)
            
            subscription_text = (
                "üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
                "–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {three_months_later.strftime('%d.%m.%Y')}\n"
                "–¢–∞—Ä–∏—Ñ: –ü—Ä–æ–±–Ω—ã–π (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n\n"
                "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è: –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç 3 –º–µ—Å—è—Ü–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
            )
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription"))
            
            bot.send_message(message.chat.id, subscription_text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ subscription_management: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data == "extend_subscription")
    def extend_subscription(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            bot.answer_callback_query(call.id)
            
            subscription_text = (
                "üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! üéâ\n\n"
                "–í —Å–≤—è–∑–∏ —Å –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–∞, –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ë–ï–°–ü–õ–ê–¢–ù–´!\n\n"
                "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. "
                "–û –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –º—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –∑–∞—Ä–∞–Ω–µ–µ."
            )
            
            bot.send_message(call.message.chat.id, subscription_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ extend_subscription: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(func=lambda m: m.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    def support_request(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º FAQ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="show_specialist_faq"))
            keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ", callback_data="ask_specialist_support"))
            
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ support_request: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data == "show_specialist_faq")
    def show_specialist_faq(call):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç FAQ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            from utils.faq_specialist import specialist_faq
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ FAQ
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            for i, section in enumerate(specialist_faq.keys()):
                keyboard.add(types.InlineKeyboardButton(section, callback_data=f"spec_faq_section_{i}"))
            
            keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_support"))
            
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
            
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ FAQ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("spec_faq_section_"))
    def show_specialist_faq_section(call):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª FAQ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        """
        try:
            section_index = int(call.data.split("_")[3])
            from utils.faq_specialist import specialist_faq
            
            sections = list(specialist_faq.keys())
            if section_index < 0 or section_index >= len(sections):
                bot.answer_callback_query(call.id, "–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            section_name = sections[section_index]
            section_content = specialist_faq[section_name]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞
            text = f"<b>{section_name}</b>\n\n{section_content}\n\n"
            text += "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –Ω–∞–ø—Ä—è–º—É—é –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_specialist_faq"))
            keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_specialist_support"))
            
            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞–∑–¥–µ–ª–∞ FAQ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞")

    @bot.callback_query_handler(func=lambda call: call.data == "back_to_support")
    def back_to_support(call):
        """
        –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        """
        try:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="show_specialist_faq"))
            keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ", callback_data="ask_specialist_support"))
            
            bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard
            )
            
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data == "ask_specialist_support")
    def ask_specialist_support_request(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ" –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        """
        try:
            bot.edit_message_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:",
                call.message.chat.id,
                call.message.message_id
            )
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
            bot.set_state(call.from_user.id, SpecialistStates.waiting_for_support_question, call.message.chat.id)
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")

    @bot.message_handler(state=SpecialistStates.waiting_for_support_question)
    def process_specialist_support_question(message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
        """
        try:
            question = message.text.strip()
            user_id = message.from_user.id
            username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}"
            
            if not question:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            specialist_info = ""
            if specialist:
                specialist_info = (
                    f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {specialist.get('–ò–º—è', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"ID: {specialist['id']}\n"
                    f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialist.get('–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = (
                f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n\n"
                f"–û—Ç: {username} (Telegram ID: {user_id})\n"
                f"{specialist_info}\n\n"
                f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
                f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /reply {user_id} [–≤–∞—à –æ—Ç–≤–µ—Ç]"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ settings –∏–ª–∏ constants
            try:
                from settings import ADMIN_IDS
                admin_ids = ADMIN_IDS
            except ImportError:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –≤ settings, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π ID
                admin_ids = [611331106]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∑–∞–¥–∞–Ω–∏—è
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            sent = False
            for admin_id in admin_ids:
                try:
                    bot.send_message(admin_id, admin_message)
                    sent = True
                except Exception as admin_err:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {admin_err}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            if sent:
                bot.send_message(
                    message.chat.id, 
                    "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=get_specialist_menu_keyboard()
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_specialist_menu_keyboard()
                )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.delete_state(user_id, message.chat.id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            logging_service.log_message(user_id, username, f"–û—Ç–ø—Ä–∞–≤–∏–ª –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {question}", "user")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}", exc_info=True)
            bot.send_message(
                message.chat.id, 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_specialist_menu_keyboard()
            )
            bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(func=lambda m: m.text == "‚ùì FAQ")
    def main_faq_button(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ FAQ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        """
        user_id = message.from_user.id
        specialist = sheets_service.get_specialist_by_telegram_id(user_id)
        
        if not specialist:
            bot.send_message(
                message.chat.id,
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                    types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                )
            )
            return
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            from utils.faq_specialist import specialist_faq
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ FAQ
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            for i, section in enumerate(specialist_faq.keys()):
                keyboard.add(types.InlineKeyboardButton(section, callback_data=f"spec_faq_section_{i}"))
            
            keyboard.add(types.InlineKeyboardButton("‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_specialist_support"))
            
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ FAQ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–∑ –º–µ–Ω—é: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # =====================
    # 3. –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏
    # =====================
        @bot.message_handler(func=lambda m: m.text == "üìÖ –ú–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        def view_my_calendar(message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –æ –∑–∞–ø–∏—Å—è—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = date.today()
            year, month = today.year, today.month

            calendar_kb = get_calendar_keyboard(
                year, month, 
                specialist_id=specialist['id'], 
                sheets_service=sheets_service,
                mode="view"
            )

            bot.send_message(
                message.chat.id,
                "–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–µ–π. –î–Ω–∏ —Å –∑–∞–ø–∏—Å—è–º–∏ –æ—Ç–º–µ—á–µ–Ω—ã üü¢, —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–Ω–∏ ‚ö™, —Å–º–µ—à–∞–Ω–Ω—ã–µ –¥–Ω–∏ üü°, –∑–∞–∫—Ä—ã—Ç—ã–µ –¥–Ω–∏ üî¥. "
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:",
                reply_markup=calendar_kb
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ view_my_calendar: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = date.today()
            year, month = today.year, today.month
            
            calendar_kb = get_calendar_keyboard(
                year, month, 
                specialist_id=specialist['id'], 
                sheets_service=sheets_service,
                mode="view"
            )
            
            bot.send_message(
                message.chat.id,
                "–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–µ–π. –î–Ω–∏ —Å –∑–∞–ø–∏—Å—è–º–∏ –æ—Ç–º–µ—á–µ–Ω—ã üü¢. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:",
                reply_markup=calendar_kb
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ view_my_calendar: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("view_calendar_nav_"))
    def view_calendar_nav(call):
        """
        –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
        """
        try:
            _, year, month = call.data.split('_')[2:]
            year = int(year)
            month = int(month)
            
            user_id = call.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            calendar_kb = get_calendar_keyboard(
                year, month, 
                specialist_id=specialist['id'], 
                sheets_service=sheets_service,
                mode="view"
            )
            
            bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=calendar_kb
            )
            
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ view_calendar_nav: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é")

        @bot.callback_query_handler(func=lambda call: call.data.startswith("view_day_"))
        def view_day_appointments(call):
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        """
        try:
            date_str = call.data.split('_')[2]
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            specialist_id = specialist['id']

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d.%m.%Y')
            except:
                formatted_date = date_str

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            all_slots = sheets_service.schedule_sheet.get_all_records()
            day_slots = []
            normalized_date = normalize_date(date_str)

            for slot in all_slots:
                slot_date = normalize_date(slot.get('–î–∞—Ç–∞', ''))
                if (str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(specialist_id) and 
                    slot_date == normalized_date):
                    day_slots.append(slot)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            day_slots.sort(key=lambda s: s['–í—Ä–µ–º—è'])

            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∑–∞–Ω—è—Ç—ã–µ, —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ
            busy_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')]
            free_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–°–≤–æ–±–æ–¥–Ω–æ']
            closed_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–∫—Ä—ã—Ç–æ' or 
                          (slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and not slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'))]

            # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if not day_slots:
                text = f"–ù–∞ {formatted_date} –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton("üîô –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar"))

                bot.edit_message_text(
                    text,
                    chat_id,
                    call.message.message_id,
                    reply_markup=keyboard
                )
                bot.answer_callback_query(call.id)
                return

            text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {formatted_date}:\n\n"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö
            if busy_slots:
                text += "üü¢ <b>–ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:</b>\n"
                for i, slot in enumerate(busy_slots, 1):
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                    client_id = slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')
                    client_info = "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

                    if client_id:
                        client = sheets_service.get_client_by_id(client_id)
                        if client:
                            client_info = f"{client.get('–ò–º—è', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (—Ç–µ–ª: {client.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω')})"

                    text += f"{i}. {slot['–í—Ä–µ–º—è']} - {client_info}\n"
                text += "\n"
            else:
                text += "üü¢ <b>–ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:</b> –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
            if free_slots:
                text += "‚ö™ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:</b>\n"
                for i, slot in enumerate(free_slots, 1):
                    text += f"{i}. {slot['–í—Ä–µ–º—è']}\n"
                text += "\n"
            else:
                text += "‚ö™ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:</b> –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n\n"
                
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö
            if closed_slots:
                text += "üî¥ <b>–ó–∞–∫—Ä—ã—Ç—ã–µ —Å–ª–æ—Ç—ã:</b>\n"
                for i, slot in enumerate(closed_slots, 1):
                    text += f"{i}. {slot['–í—Ä–µ–º—è']}\n"
                text += "\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏
            keyboard = types.InlineKeyboardMarkup()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–∞–∂–¥–æ–π –∑–∞–Ω—è—Ç–æ–π –∑–∞–ø–∏—Å–∏
            for i, slot in enumerate(busy_slots, 1):
                slot_id = slot['id']
                time = slot['–í—Ä–µ–º—è']
                keyboard.add(types.InlineKeyboardButton(
                    f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ {time}", 
                    callback_data=f"cancel_client_appt_{slot_id}"
                ))
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            if free_slots:
                keyboard.add(types.InlineKeyboardButton(
                    "üîí –ó–∞–∫—Ä—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã", 
                    callback_data=f"close_all_slots_{date_str}"
                ))
                
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
            for i, slot in enumerate(closed_slots, 1):
                slot_id = slot['id']
                time = slot['–í—Ä–µ–º—è']
                keyboard.add(types.InlineKeyboardButton(
                    f"üîì –û—Ç–∫—Ä—ã—Ç—å —Å–ª–æ—Ç –≤ {time}", 
                    callback_data=f"open_time_{slot_id}"
                ))
            
            keyboard.add(types.InlineKeyboardButton("üîô –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            bot.edit_message_text(
                text,
                chat_id,
                call.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ view_day_appointments: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–µ–π")
def view_day_appointments(call):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    """
    try:
        date_str = call.data.split('_')[2]
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        specialist = sheets_service.get_specialist_by_telegram_id(user_id)
        if not specialist:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        specialist_id = specialist['id']

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            formatted_date = date_obj.strftime('%d.%m.%Y')
        except:
            formatted_date = date_str

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        all_slots = sheets_service.schedule_sheet.get_all_records()
        day_slots = []
        normalized_date = normalize_date(date_str)

        for slot in all_slots:
            slot_date = normalize_date(slot.get('–î–∞—Ç–∞', ''))
            if (str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(specialist_id) and 
                slot_date == normalized_date):
                day_slots.append(slot)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        day_slots.sort(key=lambda s: s['–í—Ä–µ–º—è'])

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∑–∞–Ω—è—Ç—ã–µ, —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ
        busy_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')]
        free_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–°–≤–æ–±–æ–¥–Ω–æ']
        closed_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–∫—Ä—ã—Ç–æ' or 
                        (slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and not slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'))]

        # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if not day_slots:
            text = f"–ù–∞ {formatted_date} –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üîô –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar"))
            
            bot.edit_message_text(
                text,
                chat_id,
                call.message.message_id,
                reply_markup=keyboard
            )
            bot.answer_callback_query(call.id)
            return

        text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {formatted_date}:\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö
        if busy_slots:
            text += "üü¢ <b>–ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:</b>\n"
            for i, slot in enumerate(busy_slots, 1):
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                client_id = slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')
                client_info = "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                
                if client_id:
                    client = sheets_service.get_client_by_id(client_id)
                    if client:
                        client_info = f"{client.get('–ò–º—è', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (—Ç–µ–ª: {client.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω')})"
                
                text += f"{i}. {slot['–í—Ä–µ–º—è']} - {client_info}\n"
            text += "\n"
        else:
            text += "üü¢ <b>–ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:</b> –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
        if free_slots:
            text += "‚ö™ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:</b>\n"
            for i, slot in enumerate(free_slots, 1):
                text += f"{i}. {slot['–í—Ä–µ–º—è']}\n"
            text += "\n"
        else:
            text += "‚ö™ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:</b> –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n\n"
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö
        if closed_slots:
            text += "üî¥ <b>–ó–∞–∫—Ä—ã—Ç—ã–µ —Å–ª–æ—Ç—ã:</b>\n"
            for i, slot in enumerate(closed_slots, 1):
                text += f"{i}. {slot['–í—Ä–µ–º—è']}\n"
            text += "\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏
        keyboard = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–∞–∂–¥–æ–π –∑–∞–Ω—è—Ç–æ–π –∑–∞–ø–∏—Å–∏
        for i, slot in enumerate(busy_slots, 1):
            slot_id = slot['id']
            time = slot['–í—Ä–µ–º—è']
            keyboard.add(types.InlineKeyboardButton(
                f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ {time}", 
                callback_data=f"cancel_client_appt_{slot_id}"
            ))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        if free_slots:
            keyboard.add(types.InlineKeyboardButton(
                "üîí –ó–∞–∫—Ä—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã", 
                callback_data=f"close_all_slots_{date_str}"
            ))
            
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        for i, slot in enumerate(closed_slots, 1):
            slot_id = slot['id']
            time = slot['–í—Ä–µ–º—è']
            keyboard.add(types.InlineKeyboardButton(
                f"üîì –û—Ç–∫—Ä—ã—Ç—å —Å–ª–æ—Ç –≤ {time}", 
                callback_data=f"open_time_{slot_id}"
            ))
        
        keyboard.add(types.InlineKeyboardButton("üîô –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        bot.edit_message_text(
            text,
            chat_id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ view_day_appointments: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–µ–π")

    
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
    
            specialist_id = specialist['id']
    
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d.%m.%Y')
            except:
                formatted_date = date_str
    
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            all_slots = sheets_service.schedule_sheet.get_all_records()
            day_slots = []
            normalized_date = normalize_date(date_str)
    
            for slot in all_slots:
                slot_date = normalize_date(slot.get('–î–∞—Ç–∞', ''))
                if (str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(specialist_id) and 
                    slot_date == normalized_date):
                    day_slots.append(slot)
    
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            day_slots.sort(key=lambda s: s['–í—Ä–µ–º—è'])
    
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∑–∞–Ω—è—Ç—ã–µ, —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ
            busy_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')]
            free_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–°–≤–æ–±–æ–¥–Ω–æ']
            closed_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–∫—Ä—ã—Ç–æ' or 
                            (slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and not slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'))]
    
            # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if not day_slots:
                text = f"–ù–∞ {formatted_date} –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton("üîô –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar"))
                
                bot.edit_message_text(
                    text,
                    chat_id,
                    call.message.message_id,
                    reply_markup=keyboard
                )
                bot.answer_callback_query(call.id)
                return
    
            text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {formatted_date}:\n\n"
    
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö
            if busy_slots:
                text += "üü¢ <b>–ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:</b>\n"
                for i, slot in enumerate(busy_slots, 1):
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                    client_id = slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')
                    client_info = "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    
                    if client_id:
                        client = sheets_service.get_client_by_id(client_id)
                        if client:
                            client_info = f"{client.get('–ò–º—è', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (—Ç–µ–ª: {client.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω')})"
                    
                    text += f"{i}. {slot['–í—Ä–µ–º—è']} - {client_info}\n"
                text += "\n"
            else:
                text += "üü¢ <b>–ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:</b> –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
    
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
            if free_slots:
                text += "‚ö™ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:</b>\n"
                for i, slot in enumerate(free_slots, 1):
                    text += f"{i}. {slot['–í—Ä–µ–º—è']}\n"
                text += "\n"
            else:
                text += "‚ö™ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:</b> –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n\n"
                
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö
            if closed_slots:
                text += "üî¥ <b>–ó–∞–∫—Ä—ã—Ç—ã–µ —Å–ª–æ—Ç—ã:</b>\n"
                for i, slot in enumerate(closed_slots, 1):
                    text += f"{i}. {slot['–í—Ä–µ–º—è']}\n"
                text += "\n"
    
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏
            keyboard = types.InlineKeyboardMarkup()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–∞–∂–¥–æ–π –∑–∞–Ω—è—Ç–æ–π –∑–∞–ø–∏—Å–∏
            for i, slot in enumerate(busy_slots, 1):
                slot_id = slot['id']
                time = slot['–í—Ä–µ–º—è']
                keyboard.add(types.InlineKeyboardButton(
                    f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ {time}", 
                    callback_data=f"cancel_client_appt_{slot_id}"
                ))
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            if free_slots:
                keyboard.add(types.InlineKeyboardButton(
                    "üîí –ó–∞–∫—Ä—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã", 
                    callback_data=f"close_all_slots_{date_str}"
                ))
                
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
            for i, slot in enumerate(closed_slots, 1):
                slot_id = slot['id']
                time = slot['–í—Ä–µ–º—è']
                keyboard.add(types.InlineKeyboardButton(
                    f"üîì –û—Ç–∫—Ä—ã—Ç—å —Å–ª–æ—Ç –≤ {time}", 
                    callback_data=f"open_time_{slot_id}"
                ))
            
            keyboard.add(types.InlineKeyboardButton("üîô –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            bot.edit_message_text(
                text,
                chat_id,
                call.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ view_day_appointments: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–µ–π")

    @bot.callback_query_handler(func=lambda call: call.data == "back_to_calendar")
    def back_to_calendar(call):
        """
        –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        """
        try:
            user_id = call.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = date.today()
            year, month = today.year, today.month
            
            calendar_kb = get_calendar_keyboard(
                year, month, 
                specialist_id=specialist['id'], 
                sheets_service=sheets_service,
                mode="view"
            )
            
            bot.edit_message_text(
                "–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–µ–π. –î–Ω–∏ —Å –∑–∞–ø–∏—Å—è–º–∏ –æ—Ç–º–µ—á–µ–Ω—ã üü¢. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=calendar_kb
            )
            
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ back_to_calendar: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_client_appt_"))
    def cancel_client_appointment(call):
        """
        –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
        """
        try:
            slot_id = call.data.split('_')[3]
            user_id = call.from_user.id
            chat_id = call.message.chat.id
            
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π
            all_slots = sheets_service.schedule_sheet.get_all_records()
            appointment_info = None
            client_id = None
            
            for slot in all_slots:
                if str(slot.get('id')) == str(slot_id):
                    appointment_info = slot
                    client_id = slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')
                    break
            
            if not appointment_info or not client_id:
                bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            date_str = appointment_info['–î–∞—Ç–∞']
            try:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d.%m.%Y')
            except:
                formatted_date = date_str
            
            time_str = appointment_info['–í—Ä–µ–º—è']
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                    callback_data=f"confirm_spec_cancel_{slot_id}_{date_str}"
                ),
                types.InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                    callback_data=f"view_day_{date_str}"
                )
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            bot.edit_message_text(
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {formatted_date} –≤ {time_str}?",
                chat_id,
                call.message.message_id,
                reply_markup=keyboard
            )
            
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ cancel_client_appointment: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_spec_cancel_"))
    def confirm_specialist_cancel_appointment(call):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
        """
        try:
            parts = call.data.split('_')
            slot_id = parts[3]
            date_str = parts[4]
            
            user_id = call.from_user.id
            chat_id = call.message.chat.id
            
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π
            all_slots = sheets_service.schedule_sheet.get_all_records()
            appointment_info = None
            client_id = None
            
            for slot in all_slots:
                if str(slot.get('id')) == str(slot_id):
                    appointment_info = slot
                    client_id = slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')
                    break
            
            if not appointment_info or not client_id:
                bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client = sheets_service.get_client_by_id(client_id)
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            success = sheets_service.cancel_appointment(slot_id)
            if not success:
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d.%m.%Y')
            except:
                formatted_date = date_str
            
            time_str = appointment_info['–í—Ä–µ–º—è']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            if client and client.get('Telegram_ID'):
                client_telegram_id = client.get('Telegram_ID')
                notification_text = (
                    f"‚ùó –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {formatted_date} –≤ {time_str} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏."
                )
                try:
                    bot.send_message(client_telegram_id, notification_text)
                except Exception as notify_err:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {notify_err}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–Ω—è
            view_day_appointments_callback = types.CallbackQuery(
                id=call.id,
                from_user=call.from_user,
                chat_instance=call.chat_instance,
                message=call.message,
                data=f"view_day_{date_str}"
            )
            view_day_appointments(view_day_appointments_callback)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ confirm_specialist_cancel_appointment: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("close_all_slots_"))
    def close_all_free_slots(call):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        """
        try:
            date_str = call.data.split('_')[3]
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            date_str = normalize_date(date_str)
            user_id = call.from_user.id

            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            specialist_id = specialist['id']

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
            closed = sheets_service.close_day_slots(specialist_id, date_str)
            
            if closed:
                bot.answer_callback_query(call.id, "–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã", show_alert=True)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω—è
                view_day_appointments_callback = types.CallbackQuery(
                    id=call.id,
                    from_user=call.from_user,
                    chat_instance=call.chat_instance,
                    message=call.message,
                    data=f"view_day_{date_str}"
                )
                view_day_appointments(view_day_appointments_callback)
            else:
                bot.answer_callback_query(call.id, "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ close_all_free_slots: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–ª–æ—Ç–æ–≤")
            # =====================
            # 4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            # =====================
    @bot.message_handler(func=lambda m: m.text == "üïí –ó–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –≤—Ä–µ–º—è")
    def close_specific_time(message):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
    
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return
    
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
            today = date.today()
            year, month = today.year, today.month
    
            calendar_kb = get_calendar_keyboard(
                year, month, 
                specialist_id=specialist['id'], 
                sheets_service=sheets_service
            )
    
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=calendar_kb
            )
    
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.set_state(user_id, SpecialistStates.waiting_for_calendar_action, message.chat.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ close_specific_time: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("calendar_select_"), 
                               state=SpecialistStates.waiting_for_calendar_action)
    def select_date_for_action(call):
        """
        –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        """
        try:
            date_str = call.data.split('_')[2]
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            date_str = normalize_date(date_str)
            user_id = call.from_user.id
            chat_id = call.message.chat.id
            
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            specialist_id = specialist['id']

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d.%m.%Y')
            except:
                formatted_date = date_str

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            all_slots = sheets_service.schedule_sheet.get_all_records()
            day_slots = []
            normalized_date = normalize_date(date_str)
            
            for slot in all_slots:
                slot_date = normalize_date(slot.get('–î–∞—Ç–∞', ''))
                if (str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(specialist_id) and 
                    slot_date == normalized_date):
                    day_slots.append(slot)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            day_slots.sort(key=lambda s: s['–í—Ä–µ–º—è'])

            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–Ω—è—Ç—ã–µ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ
            busy_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ']
            free_slots = [slot for slot in day_slots if slot.get('–°—Ç–∞—Ç—É—Å') == '–°–≤–æ–±–æ–¥–Ω–æ']

            if not day_slots:
                bot.answer_callback_query(call.id, "–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            with bot.retrieve_data(user_id, chat_id) as data:
                data['selected_date'] = date_str
                data['formatted_date'] = formatted_date

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            keyboard = types.InlineKeyboardMarkup()

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã (–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å)
            if free_slots:
                for slot in free_slots:
                    time = slot['–í—Ä–µ–º—è']
                    slot_id = slot['id']
                    keyboard.add(types.InlineKeyboardButton(
                        f"üîí –ó–∞–∫—Ä—ã—Ç—å {time}", 
                        callback_data=f"close_time_{slot_id}"
                    ))

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã (–Ω–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º)
            for slot in busy_slots:
                time = slot['–í—Ä–µ–º—è']
                slot_id = slot['id']
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–ó–∞–∫—Ä—ã—Ç–æ" - –µ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å
                if not slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'):
                    keyboard.add(types.InlineKeyboardButton(
                        f"üîì –û—Ç–∫—Ä—ã—Ç—å {time}", 
                        callback_data=f"open_time_{slot_id}"
                    ))
                else:
                    keyboard.add(types.InlineKeyboardButton(
                        f"üë§ –ó–∞–Ω—è—Ç–æ {time} (–∫–ª–∏–µ–Ω—Ç)", 
                        callback_data="ignore"
                    ))

            keyboard.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_time_action"))

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
            bot.set_state(user_id, SpecialistStates.waiting_for_slot_time, chat_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
            bot.send_message(
                chat_id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ {formatted_date}:",
                reply_markup=keyboard
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e_del:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º: {e_del}")

            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ select_date_for_action: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("close_time_"), 
                               state=SpecialistStates.waiting_for_slot_time)
    def close_specific_time_slot(call):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        """
        try:
            slot_id = call.data.split('_')[2]
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –≤—Å–µ –µ—â–µ —Å–≤–æ–±–æ–¥–µ–Ω
            all_slots = sheets_service.schedule_sheet.get_all_records()
            target_slot = None

            for slot in all_slots:
                if str(slot.get('id')) == str(slot_id):
                    target_slot = slot
                    break

            if not target_slot:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if target_slot.get('–°—Ç–∞—Ç—É—Å') != '–°–≤–æ–±–æ–¥–Ω–æ':
                bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                return

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ—Ç
            all_slots = sheets_service.schedule_sheet.get_all_records()
            row_idx = None
            for idx, slot in enumerate(all_slots, start=2):  # +2 —Ç.–∫. –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if str(slot.get('id')) == str(slot_id):
                    row_idx = idx
                    break

            if row_idx:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–ª–æ–Ω–∫–∏
                headers = sheets_service.schedule_sheet.row_values(1)
                status_col = headers.index('–°—Ç–∞—Ç—É—Å') + 1

                # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–∫—Ä—ã—Ç–æ"
                sheets_service.schedule_sheet.update_cell(row_idx, status_col, '–ó–∞–∫—Ä—ã—Ç–æ')

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
                date_str = target_slot.get('–î–∞—Ç–∞', '')
                time_str = target_slot.get('–í—Ä–µ–º—è', '')

                try:
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    formatted_date = date_obj.strftime('%d.%m.%Y')
                except:
                    formatted_date = date_str

                bot.answer_callback_query(call.id, f"–í—Ä–µ–º—è {time_str} –Ω–∞ {formatted_date} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ", show_alert=True)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
                bot.delete_state(user_id, chat_id)
                bot.send_message(
                    chat_id,
                    f"–°–ª–æ—Ç –Ω–∞ {formatted_date} –≤ {time_str} –∑–∞–∫—Ä—ã—Ç.",
                    reply_markup=get_specialist_menu_keyboard()
                )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
                try:
                    bot.delete_message(chat_id, call.message.message_id)
                except Exception as e_del:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e_del}")
            else:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ close_specific_time_slot: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–ª–æ—Ç–∞")
            bot.delete_state(call.from_user.id, call.message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("open_time_"), 
                               state=SpecialistStates.waiting_for_slot_time)
    def open_specific_time_slot(call):
        """
        –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        """
        try:
            slot_id = call.data.split('_')[2]
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –∑–∞–∫—Ä—ã—Ç –∏ –Ω–µ –∑–∞–Ω—è—Ç –∫–ª–∏–µ–Ω—Ç–æ–º
            all_slots = sheets_service.schedule_sheet.get_all_records()
            target_slot = None

            for slot in all_slots:
                if str(slot.get('id')) == str(slot_id):
                    target_slot = slot
                    break

            if not target_slot:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if target_slot.get('–°—Ç–∞—Ç—É—Å') != '–ó–∞–∫—Ä—ã—Ç–æ' or target_slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'):
                bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç —Å–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
                return

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ—Ç
            all_slots = sheets_service.schedule_sheet.get_all_records()
            row_idx = None
            for idx, slot in enumerate(all_slots, start=2):  # +2 —Ç.–∫. –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if str(slot.get('id')) == str(slot_id):
                    row_idx = idx
                    break

            if row_idx:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–ª–æ–Ω–∫–∏
                headers = sheets_service.schedule_sheet.row_values(1)
                status_col = headers.index('–°—Ç–∞—Ç—É—Å') + 1

                # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–°–≤–æ–±–æ–¥–Ω–æ"
                sheets_service.schedule_sheet.update_cell(row_idx, status_col, '–°–≤–æ–±–æ–¥–Ω–æ')

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
                date_str = target_slot.get('–î–∞—Ç–∞', '')
                time_str = target_slot.get('–í—Ä–µ–º—è', '')

                try:
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    formatted_date = date_obj.strftime('%d.%m.%Y')
                except:
                    formatted_date = date_str

                bot.answer_callback_query(call.id, f"–í—Ä–µ–º—è {time_str} –Ω–∞ {formatted_date} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ", show_alert=True)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
                bot.delete_state(user_id, chat_id)
                bot.send_message(
                    chat_id,
                    f"–°–ª–æ—Ç –Ω–∞ {formatted_date} –≤ {time_str} —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏.",
                    reply_markup=get_specialist_menu_keyboard()
                )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
                try:
                    bot.delete_message(chat_id, call.message.message_id)
                except Exception as e_del:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e_del}")
            else:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ open_specific_time_slot: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ª–æ—Ç–∞")
            bot.delete_state(call.from_user.id, call.message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_time_action", 
                               state=SpecialistStates.waiting_for_slot_time)
    def cancel_time_action(call):
        """
        –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–æ–º
        """
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.delete_state(user_id, chat_id)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            bot.send_message(
                chat_id,
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_specialist_menu_keyboard()
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e_del:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e_del}")

            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ cancel_time_action: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è")
            bot.delete_state(call.from_user.id, call.message.chat.id)

    # =====================
    # 5. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # =====================
    @bot.message_handler(func=lambda m: m.text == "üìÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
    def manage_schedule(message):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
                reply_markup=get_schedule_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ manage_schedule: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(func=lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    def quick_update_schedule(message):
        """
        –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            keyboard = get_month_selection_keyboard()

            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
                reply_markup=keyboard
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.set_state(user_id, SpecialistStates.waiting_for_month_selection, message.chat.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ quick_update_schedule: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(func=lambda m: m.text == "üìÜ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    def configure_standard_schedule(message):
        """
        –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≤—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            keyboard = get_month_selection_keyboard()

            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
                reply_markup=keyboard
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.set_state(user_id, SpecialistStates.waiting_for_month_selection, message.chat.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ configure_standard_schedule: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("month_"), 
                               state=SpecialistStates.waiting_for_month_selection)
    def process_month_selection(call):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """
        try:
            _, year, month = call.data.split('_')
            year = int(year)
            month = int(month)

            user_id = call.from_user.id
            chat_id = call.message.chat.id

            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            specialist_id = specialist['id']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ
            with bot.retrieve_data(user_id, chat_id) as data:
                data['target_year'] = year
                data['target_month'] = month

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                             "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
                month_str = month_names[month - 1]
                data['target_month_str'] = f"{month_str} {year}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
            all_slots = sheets_service.schedule_sheet.get_all_records()

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            if month == 12:
                next_year = year + 1
                next_month = 1
            else:
                next_year = year
                next_month = month + 1

            start_date = datetime(year, month, 1).date()
            end_date = datetime(next_year, next_month, 1).date() - timedelta(days=1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
            month_slots = [
                slot for slot in all_slots 
                if str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(specialist_id) and 
                start_date <= datetime.strptime(slot.get('–î–∞—Ç–∞', '1970-01-01'), '%Y-%m-%d').date() <= end_date
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
            client_bookings = [
                slot for slot in month_slots 
                if slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞')
            ]

            if month_slots:
                # –£–∂–µ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
                with bot.retrieve_data(user_id, chat_id) as data:
                    data['has_existing_schedule'] = True
                    data['has_client_bookings'] = len(client_bookings) > 0

                warning_text = f"–ù–∞ {data['target_month_str']} —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."

                if client_bookings:
                    warning_text += (
                        f"\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ ({len(client_bookings)}).\n"
                        "–ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã."
                    )

                warning_text += "\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard = types.InlineKeyboardMarkup()
                keyboard.row(
                    types.InlineKeyboardButton("‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm_schedule_change"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_schedule_change")
                )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–æ–±—ã–µ –¥–Ω–∏
                if client_bookings:
                    keyboard.add(types.InlineKeyboardButton(
                        "üìå –õ—É—á—à–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–æ–±—ã–µ –¥–Ω–∏", 
                        callback_data="use_special_days"
                    ))

                bot.edit_message_text(
                    warning_text,
                    chat_id,
                    call.message.message_id,
                    reply_markup=keyboard
                )
            else:
                # –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                with bot.retrieve_data(user_id, chat_id) as data:
                    data['has_existing_schedule'] = False
                    data['has_client_bookings'] = False

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞
                try:
                    bot.delete_message(chat_id, call.message.message_id)
                except Exception as e_del:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e_del}")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
                bot.set_state(user_id, SpecialistStates.waiting_for_standard_days, chat_id)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
                keyboard = get_working_days_keyboard([])
                bot.send_message(
                    chat_id,
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {data['target_month_str']}.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:",
                    reply_markup=keyboard
                )

            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_month_selection: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞")
            bot.delete_state(call.from_user.id, call.message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data == "confirm_schedule_change", 
                               state=SpecialistStates.waiting_for_month_selection)
    def confirm_schedule_change(call):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
        """
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e_del:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e_del}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
            bot.set_state(user_id, SpecialistStates.waiting_for_standard_days, chat_id)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
            keyboard = get_working_days_keyboard([])

            with bot.retrieve_data(user_id, chat_id) as data:
                target_month_str = data.get('target_month_str', '–≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü')
                has_client_bookings = data.get('has_client_bookings', False)

            message_text = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {target_month_str}.\n"

            if has_client_bookings:
                message_text += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã.\n\n"

            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:"

            bot.send_message(
                chat_id,
                message_text,
                reply_markup=keyboard
            )

            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ confirm_schedule_change: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.delete_state(call.from_user.id, call.message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_schedule_change", 
                               state=SpecialistStates.waiting_for_month_selection)
    def cancel_schedule_change(call):
        """
        –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.delete_state(user_id, chat_id)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            bot.send_message(
                chat_id,
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_specialist_menu_keyboard()
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e_del:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e_del}")

            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ cancel_schedule_change: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")

    @bot.callback_query_handler(func=lambda call: call.data == "use_special_days", 
                               state=SpecialistStates.waiting_for_month_selection)
    def switch_to_special_days(call):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Å–æ–±—ã—Ö –¥–Ω–µ–π –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.delete_state(user_id, chat_id)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e_del:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e_del}")

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–æ–±—ã—Ö –¥–Ω–µ–π
            configure_special_days(types.Message(
                message_id=0,
                from_user=call.from_user,
                date=0,
                chat=types.Chat(
                    id=chat_id,
                    type='private'
                ),
                content_type='text',
                options={},
                json_string=''
            ))

            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ switch_to_special_days: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ—Å–æ–±—ã–º –¥–Ω—è–º")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–æ–±—ã–µ –¥–Ω–∏' –∏–∑ –º–µ–Ω—é.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_work_"),
                                state=SpecialistStates.waiting_for_standard_days)
    def toggle_working_day(call):
        """
        –ü–æ–º–µ—á–∞–µ–º/—Å–Ω–∏–º–∞–µ–º –≥–∞–ª–æ—á–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        """
        try:
            day = call.data.replace("toggle_work_", "")
            user_id = call.from_user.id

            with bot.retrieve_data(user_id, call.message.chat.id) as data:
                working_days = data.get('working_days', [])
                if day in working_days:
                    working_days.remove(day)
                else:
                    working_days.append(day)
                data['working_days'] = working_days

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = get_working_days_keyboard(selected_days=working_days)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ toggle_working_day: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data == "working_days_done",
                                state=SpecialistStates.waiting_for_standard_days)
    def finish_working_days_selection(call):
        """
        –ó–∞–≤–µ—Ä—à–∏–ª–∏ –≤—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        """
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            with bot.retrieve_data(user_id, chat_id) as data:
                wd = data.get('working_days', [])

            if not wd:
                bot.answer_callback_query(call.id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è.")
                return

            bot.edit_message_text(
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏: {', '.join(wd)}",
                chat_id=chat_id,
                message_id=call.message.message_id
            )
            bot.answer_callback_query(call.id)

            bot.send_message(
                chat_id,
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):"
            )

            bot.set_state(user_id, SpecialistStates.waiting_for_standard_start, chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ finish_working_days_selection: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=SpecialistStates.waiting_for_standard_start)
    def process_standard_start(message):
        try:
            if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
                bot.delete_state(message.from_user.id, message.chat.id)
                from utils.keyboards import get_start_keyboard
                bot.send_message(
                    message.chat.id,
                    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                    reply_markup=get_start_keyboard()
                )
                return

            start_time = message.text.strip()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            try:
                datetime.strptime(start_time, "%H:%M")
            except Exception:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
                return

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['standard_start'] = start_time

            bot.set_state(message.from_user.id, SpecialistStates.waiting_for_standard_end, message.chat.id)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_standard_start: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=SpecialistStates.waiting_for_standard_end)
    def process_standard_end(message):
        try:
            if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
                bot.delete_state(message.from_user.id, message.chat.id)
                from utils.keyboards import get_start_keyboard
                bot.send_message(
                    message.chat.id,
                    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                    reply_markup=get_start_keyboard()
                )
                return

            end_time = message.text.strip()
            try:
                end_dt = datetime.strptime(end_time, "%H:%M")

                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    start_time = data.get('standard_start', '')

                start_dt = datetime.strptime(start_time, "%H:%M")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—Ü –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞
                if end_dt <= start_dt:
                    bot.send_message(message.chat.id, "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ:")
                    return
            except ValueError:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):")
                return

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['standard_end'] = end_time

            bot.set_state(message.from_user.id, SpecialistStates.waiting_for_standard_break, message.chat.id)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (0 –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω):")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_standard_end: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=SpecialistStates.waiting_for_standard_break)
    def process_standard_break(message):
        try:
            if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
                bot.delete_state(message.from_user.id, message.chat.id)
                from utils.keyboards import get_start_keyboard
                bot.send_message(
                    message.chat.id,
                    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                    reply_markup=get_start_keyboard()
                )
                return

            break_str = message.text.strip()
            if not break_str.isdigit():
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).")
                return

            break_minutes = int(break_str)
            user_id = message.from_user.id

            with bot.retrieve_data(user_id, message.chat.id) as data:
                wd = data.get('working_days', [])
                start_time = data.get('standard_start', "")
                end_time = data.get('standard_end', "")
                target_year = data.get('target_year')
                target_month = data.get('target_month')
                target_month_str = data.get('target_month_str', '')
                has_existing_schedule = data.get('has_existing_schedule', False)
                has_client_bookings = data.get('has_client_bookings', False)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                bot.delete_state(user_id, message.chat.id)
                return

            spec_id = specialist['id']

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω—É–∂–Ω–æ –µ–≥–æ –æ—á–∏—Å—Ç–∏—Ç—å
            if has_existing_schedule:
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                if target_month == 12:
                    next_year = target_year + 1
                    next_month = 1
                else:
                    next_year = target_year
                    next_month = target_month + 1

                start_date = datetime(target_year, target_month, 1).date()
                end_date = datetime(next_year, next_month, 1).date() - timedelta(days=1)

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã
                all_slots = sheets_service.schedule_sheet.get_all_records()

                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                rows_to_update = []
                for idx, slot in enumerate(all_slots, start=2):  # +2 —Ç.–∫. –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if (str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(spec_id) and 
                        start_date <= datetime.strptime(slot.get('–î–∞—Ç–∞', '1970-01-01'), '%Y-%m-%d').date() <= end_date):
                        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–Ω—è—Ç–∞—è –∑–∞–ø–∏—Å—å - –æ—Ç–º–µ–Ω—è–µ–º –µ—ë
                        if slot.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ' and slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'):
                            sheets_service.cancel_appointment(slot['id'])

                # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                sheets_service.clear_month_schedule(spec_id, target_year, target_month)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            tz = specialist.get('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', 'Europe/Moscow')

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
            text_result = (f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {target_month_str} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:\n"
                           f"–†–∞–±–æ—á–∏–µ –¥–Ω–∏: {', '.join(wd)}\n"
                           f"–ß–∞—Å—ã: {start_time} - {end_time}\n"
                           f"–ü–µ—Ä–µ—Ä—ã–≤: {break_minutes} –º–∏–Ω\n\n"
                           f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ...")

            bot.send_message(message.chat.id, text_result)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
            sheets_service.generate_specific_month_schedule(
                spec_id, wd, start_time, end_time, break_minutes, 
                target_year, target_month
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            bot.send_message(
                message.chat.id,
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {target_month_str} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!",
                reply_markup=get_specialist_menu_keyboard()
            )

            # –ï—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if has_client_bookings:
                bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã."
                )

            bot.delete_state(user_id, message.chat.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_standard_break: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–æ–±—ã—Ö –¥–Ω–µ–π ---
    @bot.message_handler(func=lambda m: m.text == "üìå –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–æ–±—ã–µ –¥–Ω–∏")
    def configure_special_days(message):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Å–æ–±—ã—Ö –¥–Ω–µ–π —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            today = date.today()
            keyboard = get_calendar_keyboard(today.year, today.month, selected_dates=[])

            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–æ–±–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–æ—Ç–º–µ—á–∞—è –≥–∞–ª–æ—á–∫–æ–π), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
                reply_markup=keyboard
            )

            bot.set_state(user_id, SpecialistStates.waiting_for_special_date, message.chat.id)

            with bot.retrieve_data(user_id, message.chat.id) as data:
                data['special_dates'] = []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ configure_special_days: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("calendar_nav_"),
                                state=SpecialistStates.waiting_for_special_date)
    def calendar_nav_callback(call):
        """
        –õ–∏—Å—Ç–∞–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Å–æ–±—ã—Ö –¥–Ω–µ–π
        """
        try:
            _, year_str, month_str = call.data.split('_', 2)
            year = int(year_str)
            month = int(month_str)

            with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
                selected_dates = data.get('special_dates', [])

            keyboard = get_calendar_keyboard(year, month, selected_dates=selected_dates)

            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–∏—Å—Ç–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–æ—Å–æ–±—ã–µ –¥–Ω–∏): {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("calendar_select_"),
                                state=SpecialistStates.waiting_for_special_date)
    def select_special_date(call):
        """
        –í—ã–±–æ—Ä –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        """
        try:
            date_str = call.data.replace("calendar_select_", "")
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            with bot.retrieve_data(user_id, chat_id) as data:
                selected_dates = data.get('special_dates', [])
                if date_str in selected_dates:
                    selected_dates.remove(date_str)
                else:
                    selected_dates.append(date_str)
                data['special_dates'] = selected_dates

            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            parts = date_str.split('-')
            year = int(parts[0])
            month = int(parts[1])

            keyboard = get_calendar_keyboard(year, month, selected_dates=selected_dates)

            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=keyboard)
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (–æ—Å–æ–±—ã–µ –¥–Ω–∏): {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")

    @bot.callback_query_handler(func=lambda call: call.data == "calendar_done",
                                state=SpecialistStates.waiting_for_special_date)
    def finish_special_days_selection(call):
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–∏ –¥–∞—Ç—ã –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –æ—Å–æ–±—ã–µ —á–∞—Å—ã.
        """
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            with bot.retrieve_data(user_id, chat_id) as data:
                selected_dates = data.get('special_dates', [])

            if not selected_dates:
                bot.answer_callback_query(call.id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã.")
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            selected_dates.sort()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_dates = []
            for d in selected_dates:
                try:
                    date_obj = datetime.strptime(d, '%Y-%m-%d')
                    formatted_date = date_obj.strftime('%d.%m.%Y')
                    formatted_dates.append(formatted_date)
                except:
                    formatted_dates.append(d)

            bot.edit_message_text(
                text=f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã: {', '.join(formatted_dates)}",
                chat_id=chat_id,
                message_id=call.message.message_id
            )
            bot.answer_callback_query(call.id)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üîí –ó–∞–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏", "üïí –£–∫–∞–∑–∞—Ç—å –æ—Å–æ–±—ã–µ —á–∞—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π")
            markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")

            bot.send_message(
                chat_id,
                "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º–∏ –æ—Å–æ–±—ã–º–∏ –¥–Ω—è–º–∏?",
                reply_markup=markup
            )

            bot.set_state(user_id, SpecialistStates.waiting_for_special_option, chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ finish_special_days_selection: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")

    @bot.message_handler(state=SpecialistStates.waiting_for_special_option)
    def special_days_option(message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –æ—Å–æ–±—ã–º–∏ –¥–Ω—è–º–∏:
         - –ó–∞–∫—Ä—ã—Ç—å
         - –£–∫–∞–∑–∞—Ç—å –æ—Å–æ–±—ã–µ —á–∞—Å—ã
        """
        try:
            text = message.text.strip()
            user_id = message.from_user.id
            chat_id = message.chat.id

            if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                bot.delete_state(user_id, chat_id)
                bot.send_message(
                    chat_id,
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                    reply_markup=get_specialist_menu_keyboard()
                )
                return

            with bot.retrieve_data(user_id, chat_id) as data:
                selected_dates = data.get('special_dates', [])

            if text == "üîí –ó–∞–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏":
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                specialist = sheets_service.get_specialist_by_telegram_id(user_id)
                if not specialist:
                    bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –û—à–∏–±–∫–∞.")
                    bot.delete_state(user_id, chat_id)
                    return

                sid = specialist['id']

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                success_count = 0
                for d in selected_dates:
                    if sheets_service.close_day_slots(sid, d):
                        success_count += 1

                if success_count > 0:
                    bot.send_message(
                        chat_id,
                        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã ({success_count} –∏–∑ {len(selected_dates)}).",
                        reply_markup=get_specialist_menu_keyboard()
                    )
                else:
                    bot.send_message(
                        chat_id,
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏. –í–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è –Ω–∏—Ö –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.",
                        reply_markup=get_specialist_menu_keyboard()
                    )

                bot.delete_state(user_id, chat_id)

            elif text == "üïí –£–∫–∞–∑–∞—Ç—å –æ—Å–æ–±—ã–µ —á–∞—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π":
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 10:00):")
                bot.set_state(user_id, SpecialistStates.waiting_for_special_start, chat_id)
            else:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ special_days_option: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(state=SpecialistStates.waiting_for_special_start)
    def process_special_start_time(message):
        try:
            if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(
                    message.chat.id,
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                    reply_markup=get_specialist_menu_keyboard()
                )
                return

            start_time = message.text.strip()
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            try:
                datetime.strptime(start_time, "%H:%M")
            except:
                bot.send_message(
                    message.chat.id, 
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00):"
                )
                return

            user_id = message.from_user.id
            with bot.retrieve_data(user_id, message.chat.id) as data:
                data['special_start'] = start_time

            bot.set_state(user_id, SpecialistStates.waiting_for_special_end, message.chat.id)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 16:00):")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_special_start_time: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=SpecialistStates.waiting_for_special_end)
    def process_special_end_time(message):
        try:
            if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(
                    message.chat.id,
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                    reply_markup=get_specialist_menu_keyboard()
                )
                return

            end_time = message.text.strip()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            try:
                end_dt = datetime.strptime(end_time, "%H:%M")

                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    start_time = data.get('special_start', '')
                    selected_dates = data.get('special_dates', [])

                start_dt = datetime.strptime(start_time, "%H:%M")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—Ü –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞
                if end_dt <= start_dt:
                    bot.send_message(
                        message.chat.id, 
                        "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:"
                    )
                    return
            except ValueError:
                bot.send_message(
                    message.chat.id, 
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:00):"
                )
                return

            user_id = message.from_user.id
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –û—à–∏–±–∫–∞.")
                bot.delete_state(user_id, message.chat.id)
                return

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ö
            sid = specialist['id']
            with bot.retrieve_data(user_id, message.chat.id) as data:
                selected_dates = data.get('special_dates', [])
                start_time = data.get('special_start', '')

            if not selected_dates:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –¥–∞—Ç—ã.")
                bot.delete_state(user_id, message.chat.id)
                return

            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
            for d in selected_dates:
                sheets_service.close_day_slots(sid, d)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
            for date_str in selected_dates:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤ –º–∏–Ω—É—Ç—ã
                start_h, start_m = map(int, start_time.split(':'))
                end_h, end_m = map(int, end_time.split(':'))

                start_total = start_h * 60 + start_m
                end_total = end_h * 60 + end_m

                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç
                while start_total < end_total:
                    hh = start_total // 60
                    mm = start_total % 60
                    time_str = f"{hh:02d}:{mm:02d}"
                    sheets_service.add_schedule_slot(date_str, time_str, sid)
                    start_total += 30

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_dates = []
            for d in selected_dates:
                try:
                    date_obj = datetime.strptime(d, '%Y-%m-%d')
                    formatted_date = date_obj.strftime('%d.%m.%Y')
                    formatted_dates.append(formatted_date)
                except:
                    formatted_dates.append(d)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            formatted_dates.sort()

            bot.send_message(
                message.chat.id,
                f"–û—Å–æ–±—ã–µ —á–∞—Å—ã –¥–ª—è {len(selected_dates)} –¥–Ω–µ–π —É–∫–∞–∑–∞–Ω—ã: {start_time} - {end_time}\n"
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã: {', '.join(formatted_dates)}",
                reply_markup=get_specialist_menu_keyboard()
            )

            bot.delete_state(user_id, message.chat.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_special_end_time: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)

    # =====================
    # 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª—É–≥
    # =====================
    @bot.message_handler(func=lambda m: m.text == "üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª—É–≥")
    def services_menu(message):
        """
        –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")
            markup.add("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏")
            markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")

            bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ services_menu: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")
    def add_service_start(message):
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            bot.set_state(user_id, SpecialistStates.waiting_for_service_name, message.chat.id)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–∞—Å—Å–∞–∂ —Å–ø–∏–Ω—ã'):", reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ add_service_start: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(state=SpecialistStates.waiting_for_service_name)
    def process_service_name(message):
        try:
            if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(
                    message.chat.id,
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                    reply_markup=get_specialist_menu_keyboard()
                )
                return

            name = message.text.strip()
            if len(name) < 2:
                bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['service_name'] = name

            bot.set_state(message.from_user.id, SpecialistStates.waiting_for_service_duration, message.chat.id)

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for duration in [30, 60, 90, 120]:
                markup.add(types.KeyboardButton(str(duration)))
            markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")

            bot.send_message(
                message.chat.id, 
                "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—á–∏—Å–ª–æ):",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_service_name: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(state=SpecialistStates.waiting_for_service_duration)
    def process_service_duration(message):
        try:
            if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(
                    message.chat.id,
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                    reply_markup=get_specialist_menu_keyboard()
                )
                return

            text = message.text.strip()
            if not text.isdigit():
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60).")
                return

            duration = int(text)
            if duration < 30:
                bot.send_message(message.chat.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî 30 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['service_duration'] = duration

            bot.set_state(message.from_user.id, SpecialistStates.waiting_for_service_price, message.chat.id)

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for price in [0, 1000, 1500, 2000, 2500, 3000]:
                markup.add(types.KeyboardButton(str(price)))
            markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")

            bot.send_message(
                message.chat.id, 
                "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ —Ä—É–±–ª—è—Ö (—á–∏—Å–ª–æ), –ª–∏–±–æ 0 –µ—Å–ª–∏ –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞:",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_service_duration: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(state=SpecialistStates.waiting_for_service_price)
    def process_service_price(message):
        try:
            if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(
                    message.chat.id,
                    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                    reply_markup=get_specialist_menu_keyboard()
                )
                return

            text = message.text.strip()
            if not text.isdigit():
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500).")
                return

            price = int(text)
            user_id = message.from_user.id

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.send_message(message.chat.id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                bot.delete_state(user_id, message.chat.id)
                return

            with bot.retrieve_data(user_id, message.chat.id) as data:
                service_name = data['service_name']
                duration = data['service_duration']

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            spec_id = specialist['id']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥—É –≤ Google Sheets (–ª–∏—Å—Ç "–£—Å–ª—É–≥–∏")
            services_sheet = None
            try:
                services_sheet = sheets_service.spreadsheet.worksheet("–£—Å–ª—É–≥–∏")
            except:
                # –°–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç
                services_sheet = sheets_service.spreadsheet.add_worksheet(title='–£—Å–ª—É–≥–∏', rows=1000, cols=6)
                services_sheet.append_row(["id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–°—Ç–æ–∏–º–æ—Å—Ç—å"])

            # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —É—Å–ª—É–≥–∞
            all_svc = services_sheet.get_all_records()
            duplicate = False
            for svc in all_svc:
                if (str(svc.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', '')) == str(spec_id) and 
                    svc.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '') == service_name):
                    duplicate = True
                    break

            if duplicate:
                bot.send_message(
                    message.chat.id,
                    f"–£—Å–ª—É–≥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{service_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                    reply_markup=get_specialist_menu_keyboard()
                )
                bot.delete_state(user_id, message.chat.id)
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —É—Å–ª—É–≥—É
            new_row = [spec_id, service_name, duration, price]
            services_sheet.append_row(new_row)

            bot.send_message(
                message.chat.id,
                f"–£—Å–ª—É–≥–∞ '{service_name}' –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration} –º–∏–Ω –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {price} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=get_specialist_menu_keyboard()
            )

            bot.delete_state(user_id, message.chat.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_service_price: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(func=lambda m: m.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏")
    def edit_services(message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            sid = specialist['id']

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            services = sheets_service.get_specialist_services(sid)

            if not services:
                bot.send_message(
                    message.chat.id, 
                    "–£ –≤–∞—Å –Ω–µ—Ç —É—Å–ª—É–≥. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'.", 
                    reply_markup=get_specialist_menu_keyboard()
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            text = "–í–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
            kb = types.InlineKeyboardMarkup()

            for i, svc in enumerate(services, start=1):
                name = svc.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                dur = svc.get('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 30)
                cost = svc.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 0)

                text += f"{i}. {name} ({dur} –º–∏–Ω, {cost} ‚ÇΩ)\n"

                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
                # –ü–æ—Å–∫–æ–ª—å–∫—É id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
                service_id = f"{sid}_{name}"
                kb.add(
                    types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {i}", callback_data=f"delservice_{service_id}")
                )

            kb.add(types.InlineKeyboardButton("üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_edit_services"))

            bot.send_message(message.chat.id, text, reply_markup=kb)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ edit_services: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delservice_"))
    def delete_service(call):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
        """
        try:
            service_id = call.data.split("_", 1)[1]

            # –†–∞–∑–±–∏—Ä–∞–µ–º ID —É—Å–ª—É–≥–∏
            try:
                sid, name = service_id.split("_", 1)
            except:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID —É—Å–ª—É–≥–∏")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
            user_id = call.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist or str(specialist['id']) != str(sid):
                bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π —É—Å–ª—É–≥–∏.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            services = sheets_service.get_specialist_services(sid)

            # –ò—â–µ–º —É—Å–ª—É–≥—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            target = None
            for svc in services:
                if svc.get('–ù–∞–∑–≤–∞–Ω–∏–µ') == name:
                    target = svc
                    break

            if not target:
                bot.answer_callback_query(call.id, "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É –∏–∑ –ª–∏—Å—Ç–∞ "–£—Å–ª—É–≥–∏"
            services_sheet = sheets_service.spreadsheet.worksheet("–£—Å–ª—É–≥–∏")
            all_rows = services_sheet.get_all_values()  # –í–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, —Å–æ–≤–ø–∞–¥–∞—é—â—É—é —Å —É—Å–ª—É–≥–æ–π
            target_row = None
            for row_idx, row in enumerate(all_rows, start=1):
                if row_idx == 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    continue

                if (len(row) >= 3 and 
                    str(row[0]) == str(sid) and 
                    row[1] == name):
                    target_row = row_idx
                    break

            if target_row:
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                services_sheet.delete_row(target_row)
                bot.answer_callback_query(call.id, f"–£—Å–ª—É–≥–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞.")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
                new_services = sheets_service.get_specialist_services(sid)

                if not new_services:
                    # –ï—Å–ª–∏ —É—Å–ª—É–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç
                    try:
                        bot.edit_message_text(
                            "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —É—Å–ª—É–≥. –î–æ–±–∞–≤—å—Ç–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'.",
                            call.message.chat.id,
                            call.message.message_id
                        )
                    except Exception as e_edit:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e_edit}")
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                text = "–í–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
                kb = types.InlineKeyboardMarkup()

                for i, svc in enumerate(new_services, start=1):
                    svc_name = svc.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    dur = svc.get('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 30)
                    cost = svc.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', 0)

                    text += f"{i}. {svc_name} ({dur} –º–∏–Ω, {cost} ‚ÇΩ)\n"

                    service_id = f"{sid}_{svc_name}"
                    kb.add(
                        types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {i}", callback_data=f"delservice_{service_id}")
                    )

                kb.add(types.InlineKeyboardButton("üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_edit_services"))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    bot.edit_message_text(
                        text,
                        call.message.chat.id,
                        call.message.message_id,
                        reply_markup=kb
                    )
                except Exception as e_edit:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e_edit}")
            else:
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—Å–ª—É–≥—É –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ delete_service: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")

    @bot.callback_query_handler(func=lambda call: call.data == "close_edit_services")
    def close_edit_services(call):
        """
        –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            bot.edit_message_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ close_edit_services: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")

    # =====================
    # 7. –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã
    # =====================
    @bot.message_handler(func=lambda m: m.text == "üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã")
    def show_my_clients(message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)

            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            sid = specialist['id']

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            all_clients = sheets_service.get_all_clients()

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            my_clients = [c for c in all_clients if str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)]

            if not my_clients:
                bot.send_message(
                    message.chat.id, 
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.", 
                    reply_markup=get_specialist_menu_keyboard()
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
            text = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"

            for i, cl in enumerate(my_clients, start=1):
                name = cl.get('–ò–º—è', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                phone = cl.get('–¢–µ–ª–µ—Ñ–æ–Ω', '-')

                text += f"{i}. {name} | –¢–µ–ª: {phone}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
            ref_link = specialist.get('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è', '')
            if ref_link:
                bot_username = bot.get_me().username
                if not ref_link.startswith("https://"):
                    ref_link = f"https://t.me/{bot_username}?start=ref{sid}"
                text += f"\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤: {ref_link}"

            bot.send_message(message.chat.id, text, reply_markup=get_specialist_menu_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ show_my_clients: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            # =====================
            # 8. –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            # =====================
            @bot.message_handler(func=lambda m: m.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
            def broadcast_menu(message):
                """
                –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                """
                try:
                    user_id = message.from_user.id
                    specialist = sheets_service.get_specialist_by_telegram_id(user_id)

                    if not specialist:
                        bot.send_message(
                            message.chat.id,
                            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                                types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                            )
                        )
                        return

                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                    sid = specialist['id']

                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                    all_clients = sheets_service.get_all_clients()

                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                    my_clients = [c for c in all_clients if str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)]

                    if not my_clients:
                        bot.send_message(
                            message.chat.id, 
                            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.", 
                            reply_markup=get_specialist_menu_keyboard()
                        )
                        return

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add("üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã")
                    markup.add("üìÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é")
                    markup.add("üìÜ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É")
                    markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")

                    bot.set_state(user_id, SpecialistStates.waiting_for_recipients_choice, message.chat.id)
                    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:", reply_markup=markup)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ broadcast_menu: {e}", exc_info=True)
                    bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            @bot.message_handler(state=SpecialistStates.waiting_for_recipients_choice)
            def process_recipients_choice(message):
                try:
                    text = message.text.strip()
                    user_id = message.from_user.id
                    chat_id = message.chat.id

                    if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                        bot.delete_state(user_id, chat_id)
                        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_specialist_menu_keyboard())
                        return

                    valid_choices = ["üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã", "üìÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", "üìÜ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"]
                    if text not in valid_choices:
                        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.")
                        return

                    with bot.retrieve_data(user_id, chat_id) as data:
                        data['broadcast_choice'] = text

                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞—Ç—É, —Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
                    if text == "üìÜ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É":
                        bot.set_state(user_id, SpecialistStates.waiting_for_broadcast_date, chat_id)

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                        today = date.today()
                        keyboard = get_calendar_keyboard(today.year, today.month)

                        bot.send_message(
                            chat_id, 
                            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", 
                            reply_markup=keyboard
                        )
                    else:
                        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–∫—Å—Ç–∞
                        bot.set_state(user_id, SpecialistStates.waiting_for_message_text, chat_id)

                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")

                        bot.send_message(
                            chat_id, 
                            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", 
                            reply_markup=markup
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ process_recipients_choice: {e}", exc_info=True)
                    bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    bot.delete_state(message.from_user.id, message.chat.id)

            @bot.message_handler(state=SpecialistStates.waiting_for_message_text)
            def process_broadcast_text(message):
                try:
                    text = message.text.strip()
                    user_id = message.from_user.id
                    chat_id = message.chat.id

                    if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                        bot.delete_state(user_id, chat_id)
                        bot.send_message(chat_id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_specialist_menu_keyboard())
                        return

                    if len(text) < 2:
                        bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
                        return

                    with bot.retrieve_data(user_id, chat_id) as data:
                        data['broadcast_text'] = text

                    bot.set_state(user_id, SpecialistStates.waiting_for_message_text_confirm, chat_id)

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    keyboard.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞")

                    bot.send_message(
                        chat_id, 
                        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{text}", 
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ process_broadcast_text: {e}", exc_info=True)
                    bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    bot.delete_state(message.from_user.id, message.chat.id)

            @bot.message_handler(state=SpecialistStates.waiting_for_message_text_confirm)
            def confirm_broadcast(message):
                try:
                    choice = message.text.strip()
                    user_id = message.from_user.id
                    chat_id = message.chat.id

                    if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
                        bot.delete_state(user_id, chat_id)
                        bot.send_message(chat_id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_specialist_menu_keyboard())
                        return

                    if choice != "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
                        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞.")
                        return

                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                    with bot.retrieve_data(user_id, chat_id) as data:
                        broadcast_choice = data.get('broadcast_choice', '')
                        broadcast_text = data.get('broadcast_text', '')
                        broadcast_date = data.get('broadcast_date', '')

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                    specialist = sheets_service.get_specialist_by_telegram_id(user_id)
                    if not specialist:
                        bot.send_message(chat_id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        bot.delete_state(user_id, chat_id)
                        return

                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                    sid = specialist['id']

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                    all_clients = sheets_service.get_all_clients()
                    final_recipients = []

                    if broadcast_choice == "üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã":
                        # –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                        final_recipients = [c for c in all_clients if str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)]

                    elif broadcast_choice == "üìÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é":
                        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–∏—Å—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                        today = date.today()
                        seven_days_later = today + timedelta(days=7)

                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                        all_slots = sheets_service.schedule_sheet.get_all_records()

                        # –°–æ–±–∏—Ä–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                        client_ids = set()
                        for slot in all_slots:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                            if str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) != str(sid):
                                continue

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–ª–æ—Ç–∞
                            slot_date_str = slot.get('–î–∞—Ç–∞')
                            if not slot_date_str:
                                continue

                            try:
                                slot_date = datetime.strptime(slot_date_str, "%Y-%m-%d").date()
                                if today <= slot_date <= seven_days_later:
                                    if slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'):
                                        client_ids.add(str(slot['id_–∫–ª–∏–µ–Ω—Ç–∞']))
                            except:
                                pass

                        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ ID –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                        final_recipients = [
                            c for c in all_clients 
                            if str(c.get('id')) in client_ids and str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)
                        ]

                    elif broadcast_choice == "üìÜ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É":
                        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
                        if not broadcast_date:
                            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
                            bot.delete_state(user_id, chat_id)
                            return

                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                        all_slots = sheets_service.schedule_sheet.get_all_records()

                        # –°–æ–±–∏—Ä–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                        client_ids = set()
                        for slot in all_slots:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                            if str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) != str(sid):
                                continue

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–ª–æ—Ç–∞
                            if slot.get('–î–∞—Ç–∞') == broadcast_date and slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'):
                                client_ids.add(str(slot['id_–∫–ª–∏–µ–Ω—Ç–∞']))

                        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ ID –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                        final_recipients = [
                            c for c in all_clients 
                            if str(c.get('id')) in client_ids and str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)
                        ]

                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                    count = 0
                    for cl in final_recipients:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram ID
                        tg_id = cl.get('Telegram_ID')
                        if tg_id:
                            try:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                                personal_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {specialist.get('–ò–º—è', '–í–∞—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')}:\n\n{broadcast_text}"
                                bot.send_message(int(tg_id), personal_text)
                                count += 1
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {tg_id}: {e}")

                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                    bot.delete_state(user_id, chat_id)

                    bot.send_message(
                        chat_id,
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∫–ª–∏–µ–Ω—Ç–∞–º.",
                        reply_markup=get_specialist_menu_keyboard()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ confirm_broadcast: {e}", exc_info=True)
                    bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    bot.delete_state(message.from_user.id, message.chat.id)

            @bot.callback_query_handler(func=lambda call: call.data.startswith("calendar_select_"),
                                     state=SpecialistStates.waiting_for_broadcast_date)
            def select_broadcast_date(call):
                """
                –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                """
                try:
                    date_str = call.data.replace("calendar_select_", "")
                    user_id = call.from_user.id
                    chat_id = call.message.chat.id

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                    with bot.retrieve_data(user_id, chat_id) as data:
                        data['broadcast_date'] = date_str

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
                    try:
                        bot.delete_message(chat_id, call.message.message_id)
                    except Exception as e_del:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º: {e_del}")

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    try:
                        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                        formatted_date = date_obj.strftime('%d.%m.%Y')
                    except:
                        formatted_date = date_str

                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    bot.set_state(user_id, SpecialistStates.waiting_for_message_text, chat_id)

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")

                    bot.send_message(
                        chat_id, 
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", 
                        reply_markup=markup
                    )

                    bot.answer_callback_query(call.id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ select_broadcast_date: {e}", exc_info=True)
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã")
                    bot.delete_state(call.from_user.id, call.message.chat.id)

            # =====================
            # 9. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
            # =====================
            @bot.message_handler(func=lambda m: m.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
            def referral_link(message):
                """
                –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∞ —Ç–∞–∫–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                """
                try:
                    user_id = message.from_user.id
                    specialist = sheets_service.get_specialist_by_telegram_id(user_id)

                    if not specialist:
                        bot.send_message(
                            message.chat.id,
                            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                                types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                            )
                        )
                        return

                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                    sid = specialist['id']

                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                    ref_link = specialist.get('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è', '')
                    if not ref_link:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
                        bot_username = bot.get_me().username

                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
                        ref_link = f"https://t.me/{bot_username}?start=ref{sid}"

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ë–î
                        sheets_service.update_specialist_referral_link(sid, ref_link)

                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é (—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å / —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
                    markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")

                    bot.send_message(
                        message.chat.id,
                        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n–ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ –Ω–µ–π –∫–ª–∏–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ –≤–∞–º.",
                        reply_markup=markup
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ referral_link: {e}", exc_info=True)
                    bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            @bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
            def referral_stats(message):
                """
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–µ—Ö–æ–¥–∞–º –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
                """
                try:
                    user_id = message.from_user.id
                    specialist = sheets_service.get_specialist_by_telegram_id(user_id)

                    if not specialist:
                        bot.send_message(
                            message.chat.id,
                            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                                types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                            )
                        )
                        return

                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                    sid = specialist['id']

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
                    all_clients = sheets_service.get_all_clients()
                    my_clients = [c for c in all_clients if str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)]

                    total_count = len(my_clients)

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø–∏—Å—è–º
                    all_slots = sheets_service.schedule_sheet.get_all_records()

                    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏ –∏–º–µ—é—â–∏–µ —Å—Ç–∞—Ç—É—Å "–ó–∞–Ω—è—Ç–æ"
                    booked_slots = [
                        s for s in all_slots 
                        if str(s.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid) and s.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ'
                    ]

                    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
                    clients_with_bookings = set()
                    for slot in booked_slots:
                        if slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'):
                            clients_with_bookings.add(str(slot['id_–∫–ª–∏–µ–Ω—Ç–∞']))

                    bookings_count = len(clients_with_bookings)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    stats_text = (
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n\n"
                        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_count}\n"
                        f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–∏—Å—è–º–∏: {bookings_count}\n"
                    )

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–∑—ã–≤–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤
                    reviews = sheets_service.get_specialist_reviews(sid)
                    if reviews:
                        avg_rating = sum(r.get('–û—Ü–µ–Ω–∫–∞', 0) for r in reviews) / len(reviews)
                        stats_text += f"‚Ä¢ –û—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(reviews)}\n"
                        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/5\n"

                    bot.send_message(
                        message.chat.id,
                        stats_text,
                        reply_markup=get_specialist_menu_keyboard()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ referral_stats: {e}", exc_info=True)
                    bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ specialist.py")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    @bot.message_handler(func=lambda m: m.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    def broadcast_menu(message):
        """
        –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
    
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return
    
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            sid = specialist['id']
    
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            all_clients = sheets_service.get_all_clients()
    
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            my_clients = [c for c in all_clients if str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)]
    
            if not my_clients:
                bot.send_message(
                    message.chat.id, 
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.", 
                    reply_markup=get_specialist_menu_keyboard()
                )
                return
    
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã")
            markup.add("üìÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é")
            markup.add("üìÜ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É")
            markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
    
            bot.set_state(user_id, SpecialistStates.waiting_for_recipients_choice, message.chat.id)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:", reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ broadcast_menu: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @bot.message_handler(state=SpecialistStates.waiting_for_recipients_choice)
    def process_recipients_choice(message):
        try:
            text = message.text.strip()
            user_id = message.from_user.id
            chat_id = message.chat.id
    
            if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                bot.delete_state(user_id, chat_id)
                bot.send_message(chat_id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_specialist_menu_keyboard())
                return
    
            valid_choices = ["üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã", "üìÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", "üìÜ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"]
            if text not in valid_choices:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.")
                return
    
            with bot.retrieve_data(user_id, chat_id) as data:
                data['broadcast_choice'] = text
    
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞—Ç—É, —Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
            if text == "üìÜ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É":
                bot.set_state(user_id, SpecialistStates.waiting_for_broadcast_date, chat_id)
    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                today = date.today()
                keyboard = get_calendar_keyboard(today.year, today.month)
    
                bot.send_message(
                    chat_id, 
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", 
                    reply_markup=keyboard
                )
            else:
                # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–∫—Å—Ç–∞
                bot.set_state(user_id, SpecialistStates.waiting_for_message_text, chat_id)
    
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
    
                bot.send_message(
                    chat_id, 
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", 
                    reply_markup=markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_recipients_choice: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)
    
    @bot.message_handler(state=SpecialistStates.waiting_for_message_text)
    def process_broadcast_text(message):
        try:
            text = message.text.strip()
            user_id = message.from_user.id
            chat_id = message.chat.id
    
            if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞":
                bot.delete_state(user_id, chat_id)
                bot.send_message(chat_id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_specialist_menu_keyboard())
                return
    
            if len(text) < 2:
                bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
                return
    
            with bot.retrieve_data(user_id, chat_id) as data:
                data['broadcast_text'] = text
    
            bot.set_state(user_id, SpecialistStates.waiting_for_message_text_confirm, chat_id)
    
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞")
    
            bot.send_message(
                chat_id, 
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{text}", 
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_broadcast_text: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)
    
    @bot.message_handler(state=SpecialistStates.waiting_for_message_text_confirm)
    def confirm_broadcast(message):
        try:
            choice = message.text.strip()
            user_id = message.from_user.id
            chat_id = message.chat.id
    
            if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
                bot.delete_state(user_id, chat_id)
                bot.send_message(chat_id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_specialist_menu_keyboard())
                return
    
            if choice != "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞.")
                return
    
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            with bot.retrieve_data(user_id, chat_id) as data:
                broadcast_choice = data.get('broadcast_choice', '')
                broadcast_text = data.get('broadcast_text', '')
                broadcast_date = data.get('broadcast_date', '')
    
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
            if not specialist:
                bot.send_message(chat_id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                bot.delete_state(user_id, chat_id)
                return
    
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            sid = specialist['id']
    
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            all_clients = sheets_service.get_all_clients()
            final_recipients = []
    
            if broadcast_choice == "üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã":
                # –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                final_recipients = [c for c in all_clients if str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)]
    
            elif broadcast_choice == "üìÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é":
                # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–∏—Å—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                today = date.today()
                seven_days_later = today + timedelta(days=7)
    
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                all_slots = sheets_service.schedule_sheet.get_all_records()
    
                # –°–æ–±–∏—Ä–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                client_ids = set()
                for slot in all_slots:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                    if str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) != str(sid):
                        continue
    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–ª–æ—Ç–∞
                    slot_date_str = slot.get('–î–∞—Ç–∞')
                    if not slot_date_str:
                        continue
    
                    try:
                        slot_date = datetime.strptime(slot_date_str, "%Y-%m-%d").date()
                        if today <= slot_date <= seven_days_later:
                            if slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'):
                                client_ids.add(str(slot['id_–∫–ª–∏–µ–Ω—Ç–∞']))
                    except:
                        pass
    
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ ID –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                final_recipients = [
                    c for c in all_clients 
                    if str(c.get('id')) in client_ids and str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)
                ]
    
            elif broadcast_choice == "üìÜ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É":
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
                if not broadcast_date:
                    bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
                    bot.delete_state(user_id, chat_id)
                    return
    
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                all_slots = sheets_service.schedule_sheet.get_all_records()
    
                # –°–æ–±–∏—Ä–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                client_ids = set()
                for slot in all_slots:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                    if str(slot.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) != str(sid):
                        continue
    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–ª–æ—Ç–∞
                    if slot.get('–î–∞—Ç–∞') == broadcast_date and slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'):
                        client_ids.add(str(slot['id_–∫–ª–∏–µ–Ω—Ç–∞']))
    
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ ID –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                final_recipients = [
                    c for c in all_clients 
                    if str(c.get('id')) in client_ids and str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)
                ]
    
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            count = 0
            for cl in final_recipients:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram ID
                tg_id = cl.get('Telegram_ID')
                if tg_id:
                    try:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                        personal_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {specialist.get('–ò–º—è', '–í–∞—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')}:\n\n{broadcast_text}"
                        bot.send_message(int(tg_id), personal_text)
                        count += 1
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {tg_id}: {e}")
    
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            bot.delete_state(user_id, chat_id)
    
            bot.send_message(
                chat_id,
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∫–ª–∏–µ–Ω—Ç–∞–º.",
                reply_markup=get_specialist_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ confirm_broadcast: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_state(message.from_user.id, message.chat.id)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("calendar_select_"),
                             state=SpecialistStates.waiting_for_broadcast_date)
    def select_broadcast_date(call):
        """
        –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            date_str = call.data.replace("calendar_select_", "")
            user_id = call.from_user.id
            chat_id = call.message.chat.id
    
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            with bot.retrieve_data(user_id, chat_id) as data:
                data['broadcast_date'] = date_str
    
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
            try:
                bot.delete_message(chat_id, call.message.message_id)
            except Exception as e_del:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º: {e_del}")
    
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%d.%m.%Y')
            except:
                formatted_date = date_str
    
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.set_state(user_id, SpecialistStates.waiting_for_message_text, chat_id)
    
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
    
            bot.send_message(
                chat_id, 
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", 
                reply_markup=markup
            )
    
            bot.answer_callback_query(call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ select_broadcast_date: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã")
            bot.delete_state(call.from_user.id, call.message.chat.id)
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    @bot.message_handler(func=lambda m: m.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
    def referral_link(message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∞ —Ç–∞–∫–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
    
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return
    
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            sid = specialist['id']
    
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            ref_link = specialist.get('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è', '')
            if not ref_link:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
                bot_username = bot.get_me().username
    
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
                ref_link = f"https://t.me/{bot_username}?start=ref{sid}"
    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ë–î
                sheets_service.update_specialist_referral_link(sid, ref_link)
    
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é (—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å / —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
            markup.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
    
            bot.send_message(
                message.chat.id,
                f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n–ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ –Ω–µ–π –∫–ª–∏–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ –≤–∞–º.",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ referral_link: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
    def referral_stats(message):
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–µ—Ö–æ–¥–∞–º –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        """
        try:
            user_id = message.from_user.id
            specialist = sheets_service.get_specialist_by_telegram_id(user_id)
    
            if not specialist:
                bot.send_message(
                    message.chat.id,
                    "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                        types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
                    )
                )
                return
    
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            sid = specialist['id']
    
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
            all_clients = sheets_service.get_all_clients()
            my_clients = [c for c in all_clients if str(c.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid)]
    
            total_count = len(my_clients)
    
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø–∏—Å—è–º
            all_slots = sheets_service.schedule_sheet.get_all_records()
    
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏ –∏–º–µ—é—â–∏–µ —Å—Ç–∞—Ç—É—Å "–ó–∞–Ω—è—Ç–æ"
            booked_slots = [
                s for s in all_slots 
                if str(s.get('id_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) == str(sid) and s.get('–°—Ç–∞—Ç—É—Å') == '–ó–∞–Ω—è—Ç–æ'
            ]
    
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
            clients_with_bookings = set()
            for slot in booked_slots:
                if slot.get('id_–∫–ª–∏–µ–Ω—Ç–∞'):
                    clients_with_bookings.add(str(slot['id_–∫–ª–∏–µ–Ω—Ç–∞']))
    
            bookings_count = len(clients_with_bookings)
    
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_count}\n"
                f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–∏—Å—è–º–∏: {bookings_count}\n"
            )
    
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–∑—ã–≤–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤
            reviews = sheets_service.get_specialist_reviews(sid)
            if reviews:
                avg_rating = sum(r.get('–û—Ü–µ–Ω–∫–∞', 0) for r in reviews) / len(reviews)
                stats_text += f"‚Ä¢ –û—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(reviews)}\n"
                stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/5\n"
    
            bot.send_message(
                message.chat.id,
                stats_text,
                reply_markup=get_specialist_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ referral_stats: {e}", exc_info=True)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
